// basilcc follow kernel

namespace basilcc {

class Compiler;
class FollowBase;
class FollowRule;
class ShiftKernel;
typedef std::vector<FollowRule const *> FollowRuleVector;

class FollowKernel {
  public:
    FollowKernel(FollowRuleVector &follow_rules)
        : _shift_kernel(NULL)
    {
        _follow_rules.swap(follow_rules); // steals kernel rules
    }
    
    ~FollowKernel()
    {}

    // get kernel follow rules
    inline FollowRuleVector const &get_follow_rules() const
    {
        return _follow_rules;
    }

    // get shift kernel
    ShiftKernel &get_shift_kernel(Compiler &c)
    {
      // create on demand
      if (!_shift_kernel) {
          ShiftRuleVector shift_rules;
          shift_rules.reserve(_follow_rules.size());
          for (FollowRule const *follow_rule: _follow_rules) {
              shift_rules.push_back(follow_rule->get_shift_rule());
          }
          _shift_kernel = c.get_shift_kernel(shift_rules);
      }
      return *_shift_kernel;
    }

    // get follow base
    FollowBase const &get_follow_base(Compiler &c)
    {
        // create on demand
        if (!_follow_base) {
            ShiftBase const &shift_base = get_shift_kernel(c).get_shift_base(c);
            _follow_base.reset(new FollowBase(c, shift_base, _follow_rules));
        }
        return *_follow_base;
    }

    // get follow base, must be set
    FollowBase const &get_follow_base() const
    {
        assert(_follow_base);
        return *_follow_base;
    }

  private:
    FollowRuleVector _follow_rules;
    ShiftKernel *_shift_kernel;
    std::unique_ptr<FollowBase> _follow_base; // owns follow base
};

// a < b, compares pointers
bool operator<(FollowKernel const &a, FollowKernel const &b)
{
    FollowRuleVector const &a_follow_rules = a.get_follow_rules();
    FollowRuleVector const &b_follow_rules = b.get_follow_rules();
    if (a_follow_rules.size() != b_follow_rules.size()) {
        return a_follow_rules.size() < b_follow_rules.size();
    }
    return a_follow_rules < b_follow_rules;
}

} // basilcc

#hdr
#include <vector>
#include <memory>
#end

#src
#include <basilcc_compiler.h>
#include <basilcc_follow_base.h>
#include <basilcc_follow_rule.h>
#include <basilcc_shift_kernel.h>
#include <assert.h>
#end
