namespace basilcc
{
  class BasilCC;

  // get move selection from moves
  MoveSelPtr getMoveSel (BasilCC & cc, MovePtrVector & moves)
  {
    return cc.getTable <MoveSelTable> ().getMoveSel (moves);
  }

  // get all move sels
  MoveSelPtrVector const & getMoveSels (BasilCC const & cc)
  {
    return cc.getTable <MoveSelTable> ().getMoveSels ();
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  class MoveSelTable : public Table
  {
  public:
    MoveSelTable (BasilCC & cc)
    {}
    ~ MoveSelTable ()
    {
      deleteObjects (m_move_sels.begin (), m_move_sels.end ());
    }

    // get move sel from moves
    MoveSelPtr getMoveSel (MovePtrVector & moves)
    {
      for_each (moves.begin (), moves.end (), PushMove (m_move_sel_trie));
      MoveSelPtr & move_sel = m_move_sel_trie.commit (0);
      if (! move_sel)
      {
        move_sel = new MoveSel (m_move_sels.size (), moves);
        m_move_sels.push_back (move_sel);
      }
      return move_sel;
    }

    // get all move sels
    inline MoveSelPtrVector const & getMoveSels () const
    {
      return m_move_sels;
    }

    enum { TABLE = TABLE_MOVE_SEL }
  private:
    MoveSelPtrTrie m_move_sel_trie;
    MoveSelPtrVector m_move_sels;
  }

  inline void PushMove (MoveSelPtrTrie & trie; MovePtr move) const
  {
    trie.push (size_t (move));
  }
}

#hdr
#include <basilcc_move_ptr_vector.h>
#include <basilcc_move_sel_ptr_vector.h>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_move_ptr_vector.h>
#include <basilcc_move_sel.h>
#include <basilcc_move_sel_ptr_trie.h>
#include <basilcc_move_sel_ptr_vector.h>
#include <basilcc_table.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#include <algorithm>
#end
