namespace basilcc
{
  class BasilCC;

  typedef class RecoverStrategy const * RecoverStrategyPtr;
  typedef std::vector <RecoverStrategyPtr> RecoverStrategyPtrVector;

  // add error recover strategy
  void addInsertStrategy (BasilCC & cc, SymbolPtr token)
  {
    cc.getTable <RecoverStrategyTable> ().addInsertStrategy (token);
  }
  void addDiscardStrategy (BasilCC & cc, int max_num)
  {
    cc.getTable <RecoverStrategyTable> ().addDiscardStrategy (max_num);
  }

  // get error recover strategies
  RecoverStrategyPtrVector const & getRecoverStrategies (BasilCC const & cc)
  {
    return cc.getTable <RecoverStrategyTable> ().getStrategies ();
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  class RecoverStrategyTable : public Table
  {
  public:
    RecoverStrategyTable (BasilCC & basilcc)
    {}
    ~ RecoverStrategyTable ()
    {
      deleteObjects (m_strategies.begin (), m_strategies.end ());
    }
    // add strategy
    void addInsertStrategy (SymbolPtr token)
    {
      m_strategies.push_back (new InsertStrategy (token));
    }
    void addDiscardStrategy (int max_num)
    {
      m_strategies.push_back (new DiscardStrategy (max_num));
    }
    // get all strategies
    RecoverStrategyPtrVector const & getStrategies () const
    {
      return m_strategies;
    }
    enum { TABLE = TABLE_RECOVER_STRATEGY }
  private:
    RecoverStrategyPtrVector m_strategies;
  }
}

#hdr
#include <basilcc/symbol_ptr.h>
#include <vector>
#end

#src
#include <basilcc/basilcc.h>
#include <basilcc/recover_strategy.h>
#include <basilcc/table.h>
#include <basilcc/util.h>
#end
