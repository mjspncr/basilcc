namespace basilcx {

class LazyMove;
class LazyMoveSel;
typedef std::vector<LazyMove *> LazyMoveVector;

class LazyMoveSelTable
{
  public:
    LazyMoveSelTable()
    {}

    ~LazyMoveSelTable()
    {
        delete_objects(_lazy_move_sels);
    }

    // get lazy move sel, steals lazy moves
    LazyMoveSel *get_lazy_move_sel(LazyMoveVector &lazy_moves)
    {
        std::unique_ptr<LazyMoveSel> lazy_move_sel_ptr(new LazyMoveSel(lazy_moves));
        std::pair<LazyMoveSelSet::iterator, bool> r = _lazy_move_sels.insert(lazy_move_sel_ptr.get());
        if (r.second) {
            lazy_move_sel_ptr.release();
        }
        return *r.first;
    }

private:
    bool LazyMoveSelLess(; LazyMoveSel *a, LazyMoveSel *b) const { return *a < *b; }
    typedef std::set<LazyMoveSel *, LazyMoveSelLess> LazyMoveSelSet;
    LazyMoveSelSet _lazy_move_sels;
};

} // basilcx

#hdr
#include <set>
#include <vector>
#end

#src
#include <basilcx_lazy_move_sel.h>
#include <basilcx_util.h>

#include <memory>
#end
