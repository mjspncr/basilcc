// basilcc move, token to action seq
//

namespace basilcc {

class Symbol;
class ActionSeq;

class Move {
  public:
    Move(Symbol const *token, ActionSeq const *action_seq)
        : _num(-1), _token(token), _action_seq(action_seq)
    {}

    ~Move()
    {}


    // get token
    inline Symbol const *get_token() const
    {
        return _token;
    }

    // get action seq
    inline ActionSeq const *get_action_seq() const
    {
        return _action_seq;
    }

    /* TODO
    // to string
    std::string to_string() const
    {
        std::string str = _token->getName ();
        str += " - ";
        ActionPtrVector const & actions = m_action_seq->getActions ();
        appendActions (str, actions);
    }
    */

    int _num;

  private:
    Symbol const *_token;
    ActionSeq const *_action_seq;
};

/*
// less token number
bool moveLessTokenNumber(MovePtr move, int token_num)
{
    return move->getToken ()->getNumber () <  token_num;
}

// true if move has same token number
bool moveSameTokenNumber(MovePtr move, int token_num)
{
    return move->getToken ()->getNumber () == token_num;
}
*/

bool operator<(Move const &a, Move const &b)
{
    if (a.get_token() != b.get_token()) {
        return a.get_token() < b.get_token();
    }
    return a.get_action_seq() < b.get_action_seq();
}

bool MoveLess(; Move const *a, Move const *b) const
{
    return *a < *b; 
}

} // namespace basilcc

#hdr
#include <string>
#end

#src
#include <basilcc_action.h>
#include <basilcc_action_seq.h>
#include <basilcc_symbol.h>
#end
