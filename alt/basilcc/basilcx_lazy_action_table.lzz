namespace basilcx {

class Action;
class LazyAction;
class ReduceLazyAction;
class Rule;
class Symbol;

class LazyActionTable
{
  public:
    LazyActionTable()
    {
        _shift_lazy_action = new ShiftLazyAction;
    }

    ~LazyActionTable()
    {
        delete _shift_lazy_action;
        delete_objects(_reduce_lazy_actions);
    }

    LazyAction *get_shift_lazy_action()
    {
        return _shift_lazy_action;
    }

    LazyAction *get_reduce_lazy_action(Rule *rule, Symbol *shortcut, bool accept)
    {
        std::unique_ptr<ReduceLazyAction> action_ptr(new ReduceLazyAction(rule, shortcut, accept));
        std::pair<ReduceLazyActionSet::iterator, bool> r = _reduce_lazy_actions.insert(action_ptr.get());
        if (r.second) {
            action_ptr.release();
        }
        return *r.first;
    }

  private:
    bool ReduceLazyActionLess(; ReduceLazyAction *a, ReduceLazyAction *b) const { return *a < *b; }
    typedef std::set<ReduceLazyAction *, ReduceLazyActionLess> ReduceLazyActionSet;
    ReduceLazyActionSet _reduce_lazy_actions;
    LazyAction *_shift_lazy_action; // only one shift
};

} // basilcx

#hdr
#include <set>
#include <memory>
#end

#src
#include <basilcx_lazy_action.h>
#include <basilcx_util.h>
#end
