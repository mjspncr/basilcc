// basilcc_shift_rule
//
// shift rule, a base rule with shift priority
//

namespace basilcc {

class BaseRule;

class ShiftRule
{
  public:
    ShiftRule(BaseRule const *base_rule, Priority const &sp)
      : _base_rule(base_rule), _sp(sp)
    {}

    ~ ShiftRule()
    {}

    // get base rule
    inline BaseRule const *get_base_rule() const
    {
      return _base_rule;
    }

    // additional shift priority
    Priority get_shift_priority() const
    {
      return _sp;
    }

    // update shift priority, will keep max
    void update(Priority const &sp)
    {
      _sp = max_priority(_sp, sp);
    }

    // to string
    std::string to_string() const
    {
        std::string str;
        if (_sp.is_set()) {
            str = shift_priority_to_string(_sp);
        }
        return append_with_space(str, _base_rule->to_string());
    }

  private:
    BaseRule const *_base_rule;
    Priority _sp;
};

// a < b
bool operator <(ShiftRule const &a, ShiftRule const &b)
{
    if (a.get_base_rule() != b.get_base_rule()) {
        return *a.get_base_rule() < *b.get_base_rule();
    }
    return a.get_shift_priority() < b.get_shift_priority();
}

// get base rule from shift rule
BaseRule const *get_shift_base_rule(ShiftRule const *shift_rule)
{
    return shift_rule->get_base_rule();
}

/*
// true if shift rule has base rule
bool has_base_rule(BaseRule const *base_rule; ShiftRule const *shift_rule) const
{
    return shift_rule->get_base_rule() == base_rule;
}

*/

} // basilcc

#hdr
#include <basilcc_priority.h>
#include <string>
#end

#src
#include <basilcc_base_rule.h>
#include <basilcc_util.h>
#end
