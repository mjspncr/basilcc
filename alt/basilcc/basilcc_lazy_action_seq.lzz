// basilcc lazy action sequence

namespace basilcc {

class ActionSeq;
class Compiler;
class LazyAction;
class State;
class Symbol;

typedef std::vector<LazyAction const *> LazyActionVector;
typedef std::map<Symbol const *, State const *> ShiftMap;

class LazyActionSeq {
  public:
    LazyActionSeq(LazyActionVector const &lazy_actions)
        : _lazy_actions(lazy_actions)
    {}

    ~LazyActionSeq()
    {}

    // get lazy actions
    inline LazyActionVector const &get_lazy_actions() const
    {
        return _lazy_actions;
    }

    // get action seq
    ActionSeq const *get_action_seq(Compiler &c, ShiftMap const &token_shifts, Symbol const *token) const
    {
        ActionVector actions;
        actions.reserve(_lazy_actions.size());
        for (LazyAction const *lazy_action: _lazy_actions) {
            actions.push_back(lazy_action->get_action(c, token_shifts, token));
        }
        return c.get_action_seq(actions);
    }

  private:
    LazyActionVector _lazy_actions;
};

} // namespace basilcc

#hdr
#include <vector>
#include <map>
#end

#src
#include <basilcc_compiler.h>
#include <basilcc_lazy_action.h>
#include <algorithm>
#end
