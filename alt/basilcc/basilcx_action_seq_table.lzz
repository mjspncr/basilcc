namespace basilcx {

class Action;
class ActionSeq;
typedef std::vector<Action *> ActionVector;
typedef std::vector<ActionSeq *> ActionSeqVector;

// action sequence table
class ActionSeqTable {
  public:
    ActionSeqTable()
    {}

    ~ActionSeqTable()
    {
        delete_objects(_action_seqs);
    }

    // get shared action seq, steals actions
    ActionSeq *get_action_seq(ActionVector &actions)
    {
        std::unique_ptr<ActionSeq> action_seq_ptr(new ActionSeq(actions));
        std::pair<ActionSeqSet::iterator, bool> r = _action_seqs.insert(action_seq_ptr.get());
        if (r.second) {
            const_cast<int &>(action_seq_ptr->_num) = _action_seqs.size() - 1;
            action_seq_ptr.release();
        }
        return *r.first;
    }

    // get action sequences ordered by number
    void get_action_seqs(ActionSeqVector &action_seqs) const
    {
        ActionSeqVector(_action_seqs.begin(), _action_seqs.end()).swap(action_seqs);
        std::sort(action_seqs.begin(), action_seqs.end(), ActionSeqNumberLess());
    }

  private:
    bool ActionSeqLess(; ActionSeq *a, ActionSeq *b) const { return *a < *b; }
    typedef std::set<ActionSeq *, ActionSeqLess> ActionSeqSet;
    ActionSeqSet _action_seqs;
};

namespace {

// true if action seq number is less
inline bool ActionSeqNumberLess(; ActionSeq *a, ActionSeq *b) const
{
    return a->_num < b->_num;
}

} // unnamed
} // basilcx

#hdr
#include <set>
#include <vector>
#end

#src
#include <basilcx_action_seq.h>
#include <basilcx_util.h>

#include <memory>
#end
