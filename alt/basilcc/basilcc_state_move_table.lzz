// basilcc state move

namespace basilcc {

class ActionSeq;
class MoveSel;
class StateMove;
bool StateMoveLess(; StateMove const *a, StateMove const *b) const { return *a < *b; }
typedef std::set<StateMove const *, StateMoveLess> StateMoveSet;

class StateMoveTable {
  public:
    StateMoveTable()
    {}

    ~StateMoveTable()
    {
        delete_objects(_state_moves);
    }

    // get state move
    StateMove const *get_state_move(MoveSel const *move_sel, ActionSeq const *def_action_seq)
    {
        std::unique_ptr<StateMove> state_move_ptr(new StateMove(move_sel, def_action_seq));
        std::pair<StateMoveSet::iterator, bool> r = _state_moves.insert(state_move_ptr.get());
        if (r.second) {
            state_move_ptr->_num = _state_moves.size() - 1;
            state_move_ptr.release();
        }
        return *r.first;
    }

  private:
    StateMoveSet _state_moves;
};

} // basilcc

#hdr
#include <set>
#end

#src
#include <basilcc_state_move.h>
#include <basilcc_util.h>
#include <memory>
#end
