// basilcc action seq

namespace basilcc {

class Action;
typedef std::vector<Action *> ActionVector;

class ActionSeq {
  public:
    // steals actions
    ActionSeq(ActionVector &actions)
        : _num(-1)
    {
        _actions.swap(actions);
    }

    ~ActionSeq()
    {}
    
    inline ActionVector const &get_actions() const
    {
        return _actions;
    }
    
    const int _num;
  private:
    ActionVector _actions;
};

bool operator<(ActionSeq const &a, ActionSeq const &b)
{
    ActionVector const &a_actions = a.get_actions();
    ActionVector const &b_actions = b.get_actions();
    if (a_actions.size() != b_actions.size()) {
        return a_actions.size() < b_actions.size();
    }
    return a_actions < b_actions; // OK to compare pointers
}

bool ActionSeqLess(; ActionSeq const *a, ActionSeq const *b) const
{
    return *a < *b;
}

bool ActionSeqNumberLess(; ActionSeq const *a, ActionSeq const *b) const
{
    return a->_num < b->_num;
}

} // basilcc

#hdr
#include <vector>
#end
