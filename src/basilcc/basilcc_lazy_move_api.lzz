namespace basilcc
{
  class BasilCC;

  // get lazy move from token and lazy action seq
  LazyMovePtr getLazyMove (BasilCC & cc, SymbolPtr token, LazyActionSeqPtr lazy_action_seq)
  {
    return cc.getTable <LazyMoveTable> ().getLazyMove (token, lazy_action_seq);
  }
}

using namespace basilcc;

namespace
{
  class LazyMoveTable : public Table
  {
  public:
    LazyMoveTable (BasilCC & cc)
    {}
    ~ LazyMoveTable ()
    {
      deleteObjects (m_lazy_moves.begin (), m_lazy_moves.end ());
    }

    // get lazy move from token and action sequence
    LazyMovePtr getLazyMove (SymbolPtr token, LazyActionSeqPtr lazy_action_seq)
    {
      m_lazy_move_trie.push (size_t (token));
      m_lazy_move_trie.push (size_t (lazy_action_seq));
      LazyMovePtr & lazy_move = m_lazy_move_trie.commit (0);
      if (! lazy_move)
      {
        lazy_move = * m_lazy_moves.insert (m_lazy_moves.end (), new LazyMove (token, lazy_action_seq));
      }
      return lazy_move;
    }

    enum { TABLE = TABLE_LAZY_MOVE }
  private:
    LazyMovePtrTrie m_lazy_move_trie;
    LazyMovePtrVector m_lazy_moves;
  }
}

#hdr
#include <basilcc_lazy_action_seq_ptr.h>
#include <basilcc_lazy_move_ptr.h>
#include <basilcc_symbol_ptr.h>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_lazy_action_seq_ptr.h>
#include <basilcc_lazy_move.h>
#include <basilcc_lazy_move_ptr_trie.h>
#include <basilcc_lazy_move_ptr_vector.h>
#include <basilcc_symbol_ptr.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#end
