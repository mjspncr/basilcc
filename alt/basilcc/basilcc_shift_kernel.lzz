// basilcc shift kernel
//

namespace basilcc {

class BaseKernel;
class Compiler;
class ShiftRule;

typedef std::vector<ShiftRule const *> ShiftRuleVector;

class ShiftKernel
{
  public:
    // steals shift rules
    ShiftKernel(ShiftRuleVector &shift_rules)
        : _base_kernel(0)
    {
        _shift_rules.swap(shift_rules);
    }

    ~ShiftKernel()
    {}

    // get kernel shift rules
    ShiftRuleVector const &get_shift_rules() const
    {
        return _shift_rules;
    }

    // get base kernel
    BaseKernel const &get_base_kernel(Compiler &c)
    {
        if (!_base_kernel) {
            BaseRuleVector base_rules;
            base_rules.reserve(_shift_rules.size());
            for (ShiftRule const *shift_rule: _shift_rules) {
                base_rules.push_back(shift_rule->get_base_rule());
            }
            _base_kernel = c.get_base_kernel(base_rules);
        }
        return *_base_kernel;
    }   

    // get shift base
    ShiftBase const &get_shift_base(Compiler &c)
    {
        if (!_shift_base) {
            BaseKernel const &base_kernel = get_base_kernel(c);
            _shift_base.reset(new ShiftBase(c, base_kernel, _shift_rules));
        }
        return *_shift_base;
    }

  private:
    ShiftRuleVector _shift_rules;
    BaseKernel const *_base_kernel;
    std::unique_ptr<ShiftBase> _shift_base; // owns _shift_base
};

// true if a < b
bool operator <(ShiftKernel const &a, ShiftKernel const &b)
{
    ShiftRuleVector const &a_rules = a.get_shift_rules();
    ShiftRuleVector const &b_rules = b.get_shift_rules();
    if (a_rules.size() != b_rules.size()) {
        return a_rules.size() < b_rules.size();
    }
    for (ShiftRuleVector::const_iterator i = a_rules.begin(), endi = a_rules.end(), j = b_rules.begin(); i != endi; ++i, ++j) {
        ShiftRule const *a_rule = *i;
        ShiftRule const *b_rule = *j;
        if (a_rule != b_rule) {
            return a_rule < b_rule; // compare pointers
        }
    }
    return false;
}

inline bool ShiftKernelLess(; ShiftKernel const *a, ShiftKernel const *b) const
{
    return *a < *b;
}

} // basilcc

#hdr
#include <basilcc_shift_base.h>
#include <memory>
#include <vector>
#end

#src
#include <basilcc_compiler.h>
#include <basilcc_shift_base.h>
#include <basilcc_shift_rule.h>
#include <algorithm>
#end
