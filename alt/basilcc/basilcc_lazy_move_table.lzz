// basilcc lazy move table

namespace basilcc {

class Symbol;
class LazyActionSeq;
typedef std::set<LazyMove const *, LazyMoveLess> LazyMoveSet;

class LazyMoveTable
{
  public:
    LazyMoveTable()
    {}

    ~LazyMoveTable()
    {
        delete_objects(_lazy_moves);
    }

    // get lazy move from token and action sequence 
    LazyMove const *get_lazy_move(Symbol const *token, LazyActionSeq const *lazy_action_seq)
    {
        std::unique_ptr<LazyMove> lazy_move_ptr(new LazyMove(token, lazy_action_seq));
        std::pair<LazyMoveSet::iterator, bool> r = _lazy_moves.insert(lazy_move_ptr.get());
        if (r.second) {
            lazy_move_ptr.release();
        }
        return *r.first;
    }

    inline LazyMoveSet const &get_lazy_moves() const
    {
        return _lazy_moves;
    }

private:
    LazyMoveSet _lazy_moves;
};

} // basilcc

#hdr
#include <set>
#include <basilcc_lazy_move.h>
#end

#src
#include <basilcc_util.h>
#include <memory>
#end
