namespace basilcc
{
  class BasilCC;
  class Priority;

  // freeze shift rule and return shared rule, reuse shift_rule or delete it
  ShiftRulePtr freezeShiftRule (BasilCC & cc, ShiftRulePtr & shift_rule)
  {
    return cc.getTable <ShiftRuleTable> ().freeze (shift_rule);
  }
  // functor
  inline ShiftRulePtr FreezeShiftRule (BasilCC & cc; ShiftRulePtr & shift_rule)
  {
    return freezeShiftRule (cc, shift_rule);
  }

  // get shift rule from components
  ShiftRulePtr getShiftRule (BasilCC & cc, BaseRulePtr base_rule, Priority const & sp)
  {
    return cc.getTable <ShiftRuleTable> ().getRule (base_rule, sp);
  }

  // advance dot and return shift rule
  ShiftRulePtr getNextShiftRule (BasilCC & cc, ShiftRulePtr shift_rule)
  {
    return getShiftRule (cc, getNextBaseRule (cc, shift_rule->getBaseRule ()), shift_rule->getShiftPriority ());
  }
}

using namespace basilcc;

namespace
{
  class ShiftRuleTable : public Table
  {
  public:
    ShiftRuleTable (BasilCC & cc)
    {}
    ~ ShiftRuleTable ()
    {
      deleteObjects (m_shift_rules.begin (), m_shift_rules.end ());
    }

    // freeze shift rule, reuse shift_rule or delete it
    ShiftRulePtr freeze (ShiftRulePtr & shift_rule)
    {
      m_shift_rules_trie.push (size_t (shift_rule->getBaseRule ()));
      Priority const & sp = shift_rule->getShiftPriority ();
      m_shift_rules_trie.push (sp.get_count());
      m_shift_rules_trie.push (sp.get_bang());
      ShiftRulePtr & shared_shift_rule = m_shift_rules_trie.commit (shift_rule);
      if (shared_shift_rule == shift_rule)
      {
        m_shift_rules.push_back (shared_shift_rule);
      }
      else
      {
        deleteObject (shift_rule);
      }
      return shared_shift_rule;
    }

    // get shared rule from base rule and shift priority
    ShiftRulePtr getRule (BaseRulePtr base_rule, Priority const & sp)
    {
      m_shift_rules_trie.push (size_t (base_rule));
      m_shift_rules_trie.push (sp.get_count());
      m_shift_rules_trie.push (sp.get_bang());
      ShiftRulePtr & shift_rule = m_shift_rules_trie.commit (0);
      if (! shift_rule)
      {
        shift_rule = * m_shift_rules.insert (m_shift_rules.end (), new ShiftRule (base_rule, sp));
      }
      return shift_rule;
    }

    enum { TABLE = TABLE_SHIFT_RULE }
  private:
    ShiftRulePtrTrie m_shift_rules_trie;
    ShiftRulePtrVector m_shift_rules;
  }
}

#hdr
#include <basilcc_base_rule_ptr.h>
#include <basilcc_shift_rule_ptr.h>
#end

#src
#include <basilcc_base_rule_api.h>
#include <basilcc_basilcc.h>
#include <basilcc_priority.h>
#include <basilcc_shift_rule.h>
#include <basilcc_shift_rule_ptr_trie.h>
#include <basilcc_shift_rule_ptr_vector.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#end
