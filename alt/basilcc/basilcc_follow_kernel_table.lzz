// basilcc follow kernel table
//

namespace basilcc {

class FollowRule;
class FollowKernel;
typedef std::vector<FollowRule const *> FollowRuleVector;

class FollowKernelTable {
  public:
    FollowKernelTable()
    {}
    
    ~FollowKernelTable()
    {
        delete_objects(_follow_kernels);
    }

    // get follow kernel from rules
    FollowKernel *get_follow_kernel(FollowRuleVector &follow_rules)
    {
        std::unique_ptr<FollowKernel> follow_kernel_ptr(new FollowKernel(follow_rules));
        std::pair<FollowKernelSet::iterator, bool> r = _follow_kernels.insert(follow_kernel_ptr.get());
        if (r.second) {
            follow_kernel_ptr.release();
        }
        return *r.first;
    }

  private:
    bool FollowKernelLess(; FollowKernel const *a, FollowKernel const *b) const { return *a < *b; }
    typedef std::set<FollowKernel *, FollowKernelLess> FollowKernelSet;
    FollowKernelSet _follow_kernels;
};

} // basilcc

#hdr
#include <vector>
#include <set>
#end

#src
#include <basilcc_follow_kernel.h>
#include <basilcc_util.h>
#include <memory>
#end
