namespace basilcc
{
  class BasilCC;

  // freeze follow, return shared follow, reuse follow or delete it
  FollowPtr freezeFollow (BasilCC & cc, FollowPtr follow)
  {
    // freeze follow items then follow itself
    follow->freeze (cc);
    return cc.getTable <FollowTable> ().freeze (follow);
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  class FollowTable : public Table
  {
  public:
    FollowTable (BasilCC & cc)
    {}
    ~ FollowTable ()
    {
      deleteObjects (m_follows.begin (), m_follows.end ());
    }
    
    // freeze follow and return shared follow, reuse follow or delete it  
    FollowPtr freeze (FollowPtr follow)
    {
      FollowItemPtrList const & follow_items = follow->getFollowItems ();
      for_each (follow_items.begin (), follow_items.end (), PushFollowItem (m_follow_trie));
      m_follow_trie.push (follow->getLexState ().getHandle ());
      FollowPtr shared_follow = m_follow_trie.commit (follow);
      if (shared_follow == follow)
      {
        m_follows.push_back (shared_follow);
      }
      else
      {
        deleteObject (follow);
      }
      return shared_follow;
    }

    enum { TABLE = TABLE_FOLLOW }
  private:
    FollowPtrTrie m_follow_trie;
    FollowPtrVector m_follows;
  }

  // apend follow item to trie key
  inline void PushFollowItem (FollowPtrTrie & trie; FollowItemPtr follow_item) const
  {
    trie.push (ptrdiff_t (follow_item));
  }
}

#hdr
#include <basilcc/follow_ptr.h>
#end

#src
#include <algorithm>
#include <basilcc/basilcc.h>
#include <basilcc/follow.h>
#include <basilcc/follow_item_ptr_list.h>
#include <basilcc/follow_ptr_trie.h>
#include <basilcc/follow_ptr_vector.h>
#include <basilcc/lex_state.h>
#include <basilcc/table.h>
#include <basilcc/util.h>
#end
