// basilcc_first_item
//
// item in symbol first set
//

namespace basilcc {

class Symbol;

class FirstItem
{
  public:
    inline explicit FirstItem(Symbol const *token, Priority const &fp = Priority())
        : _token(token), _fp(fp)
    {}

    ~FirstItem()
    {}

    // get token
    inline Symbol const *get_token() const
    {
        return _token;
    }

    // get first item priority
    inline Priority const &get_first_priority() const
    {
        return _fp;
    }

    // update first item priority, max of priority and item priority
    inline void update(Priority const &fp)
    {
        _fp = max_priority(_fp, fp);
    }

    std::string to_string() const
    {
        std::ostringstream ss;
        ss << _token->get_name() << first_priority_to_string(_fp);
        return ss.str();
    }

  private:
    Symbol const *_token;
    Priority _fp; // first priority
};

// return a < b, can assume both are in symbol's first set
bool operator<(FirstItem const &a, FirstItem const &b)
{
    return a.get_token() < b.get_token();
}

} // basilcc

#hdr
#include <basilcc_priority.h>
#end

#src
#include <basilcc_symbol.h>
#include <sstream>
#end
