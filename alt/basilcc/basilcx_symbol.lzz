namespace basilcx {

class ShiftRule;
class State;
class ShiftState;
typedef std::vector<ShiftState> ShiftStateVector;
typedef std::vector<ShiftRule *> ShiftRuleVector;

class Symbol
{
  public:
    virtual ~Symbol()
    {}

    // get symbol name
    inline char const *get_name() const
    {
        return _name;
    }
    
    // true if symbol is a token
    virtual bool is_token() const = 0;

    // get symbol's first set
    inline First &get_first()
    {
        return _first;
    }

    inline First const &get_first() const
    {
        return _first;
    }

    int const _num;

  protected:
    Symbol(char const *name)
        : _num(-1), _name(name)
    {}

  private:
    char const *_name;
    First _first;
};

class Token : public Symbol
{
  public:
    inline Token(char const *name)
        : Symbol(name)
    {}

    ~Token ()
    {}

    bool is_token() const
    {
      return true;
    }
};
 
class Nonterminal : public Symbol
{
  public:
    inline Nonterminal(char const *name)
        : Symbol(name)
    {}

    // true if token
    bool is_token() const
    {
        return false;
    }

    // set shift rules, steals rules
    inline void set_shift_rules(ShiftRuleVector &shift_rules)
    {
        _shift_rules.swap(shift_rules);
    }

    // get shift rules
    inline ShiftRuleVector const &get_shift_rules() const
    {
        return _shift_rules;
    }

    // set goto shift states, steals shift states 
    void set_goto(ShiftStateVector &shift_states, State *def_state)
    {
        _shift_states.swap(shift_states);
        _def_state = def_state;
    }

  private:
    ShiftRuleVector _shift_rules;
    // shift states ordered by shift number
    ShiftStateVector _shift_states;
    State * _def_state;
};

// true if a < b, tokens first, otherwise order by number
bool operator<(Symbol const &a, Symbol const &b)
{
    if (a.is_token() != b.is_token()) {
        return a.is_token();
    }
    return a._num < b._num;
}

// print symbol first set, for debuggging only
void print_first(Symbol *symbol)
{
    std::cout << symbol->get_name() << ": " << symbol->get_first().to_string() << std::endl; 
}

} // basilcx

#hdr
#include <basilcx_first.h>

#include <string>
#include <vector>
#include <memory>
#end

#src
#include <basilcx_shift_state.h>

#include <iostream>
#end
