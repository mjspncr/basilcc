namespace basilcx {

class ActionSeq;
class Move;
class Symbol;

class MoveTable
{
  public:
    MoveTable()
    {}

    ~MoveTable ()
    {
        delete_objects(_moves);
    }

    // get move from components
    Move *get_move(Symbol *token, ActionSeq *action_seq)
    {
        std::unique_ptr<Move> move_ptr(new Move(token, action_seq));
        std::pair<MoveSet::iterator, bool> r = _moves.insert(move_ptr.get());
        if (r.second) {
            move_ptr.release();
        }
        return *r.first;
    }
    
  private:
    bool MoveLess(; Move *a, Move *b) const { return *a < *b; }
    typedef std::set<Move *, MoveLess> MoveSet;
    MoveSet _moves;
};

} // basilcc

#hdr
#include <set>
#include <vector>
#end

#src
#include <basilcx_move.h>
#include <basilcx_util.h>

#include <memory>
#end
