// rule api functions
namespace basilcc
{
   class BasilCC;

   // add new rule to grammar
   void addRule(BasilCC &cc, std::string const &rule_name, RuleSymbolPtr left_rule_symbol, RuleSymbolPtrVector const &right_rule_symbols,
         RuleSymbolPtrVector const &explicit_follow, bool no_bypass)
   {
      cc.getTable<RuleTable>().addRule(rule_name, left_rule_symbol, right_rule_symbols, explicit_follow, no_bypass);
   }

   // get rules that have left hand symbol
   RulePtrVector const &getRules(BasilCC const &cc, SymbolPtr left_symbol)
   {
      return cc.getTable<RuleTable>().getRules(left_symbol);
   }

   // get start rules
   RulePtrVector const &getStartRules(BasilCC const &cc)
   {
      return cc.getTable<RuleTable>().getRules(getStartSymbol(cc));
   }

   // get all rules
   RulePtrVector const &getRules(BasilCC const &cc)
   {
      return cc.getTable<RuleTable>().getRules();
   }

   // true if symbol is a left hand symbol in some rule
   bool isLeftHandSymbol(BasilCC &cc, SymbolPtr symbol)
   {
      return cc.getTable<RuleTable>().isLeftHandSymbol(symbol);
   }

   // get all nodes
   NodePtrVector const &getNodes(BasilCC const &cc)
   {
      return cc.getTable<RuleTable>().getNodes();
   }

   // freeze rule
   void freezeRules(BasilCC &cc)
   {
      return cc.getTable<RuleTable>().freezeRules();
   }
}

using namespace basilcc;

namespace
{
   class RuleTable : public Table
   {
   public:
      RuleTable(BasilCC &cc)
         // enable_bypass should be a config option, can do later or just deprecate this feature
         : m_cc(cc), m_enable_bypass(false)
      {}
      ~ RuleTable()
      {
         deleteObjects(m_rules.begin(), m_rules.end());
         deleteObjects(m_nodes.begin(), m_nodes.end());
      }

      // add new rule to grammar
      void addRule(std::string const &rule_name, RuleSymbolPtr left_rule_symbol, RuleSymbolPtrVector const &right_rule_symbols,
            RuleSymbolPtrVector const &explicit_follow, bool no_bypass)
      {
         SymbolPtr const &left_symbol = left_rule_symbol->getSymbol();
         if (left_symbol->isToken())
         {
            std::ostringstream ss;
            ss << left_rule_symbol->getLoc() << "Rule left-hand symbol is token: " << left_symbol->getName();
            throw std::runtime_error(ss.str());
         }
         NodePtr node = 0;
         if (!rule_name.empty())
         {
            char const *node_name = m_cc.intern(toCapString(rule_name.c_str()));
            NodePtr &node_ = m_node_trie.insert(size_t(node_name), 0);
            if (!node_)
            {
               node_ = *m_nodes.insert(m_nodes.end(), new Node(node_name));
            }
            node = node_;
         }
         bool is_start = left_symbol == getStartSymbol(m_cc);
         bool can_bypass = !is_start && canBypass(node, right_rule_symbols, no_bypass);
         RulePtr rule = *m_rules.insert(m_rules.end(),
               new Rule(m_rules.size(), node, is_start, left_rule_symbol, right_rule_symbols, explicit_follow, can_bypass));
         m_left_symbol_rules.insert(size_t(left_rule_symbol->getSymbol()), RulePtrVector()).push_back(rule);
      }

      // get rule with left hand symbol, must be a left symbol
      RulePtrVector const &getRules(SymbolPtr left_symbol) const
      {
         return *m_left_symbol_rules.find(size_t(left_symbol));
      }

      // get all rules
      inline RulePtrVector const &getRules() const
      {
         return m_rules;
      }

      // get rule with left hand symbol
      bool isLeftHandSymbol(SymbolPtr left_symbol) const
      {
         return m_left_symbol_rules.find(size_t(left_symbol)) != 0;
      }

      // freeze rules
      void freezeRules()
      {
         // order rule nodes and assign numbers
         sort(m_nodes.begin(), m_nodes.end(), nodeNameLess);
         // numbers from 0
         int num = 0;
         for (NodePtrVectorConstIter i = m_nodes.begin(), endi = m_nodes.end(); i != endi; ++ i, ++ num)
         {
            (*i)->setNumber(num);
         }
         // can validate rules here instead of in check_rules()
      }

      // get all nodes
      NodePtrVector const &getNodes() const
      {
         return m_nodes;
      }

      enum { TABLE = TABLE_RULE }
   private:
      // true if can bypass rule on reduction
      bool canBypass(NodePtr node, RuleSymbolPtrVector const &right_rule_symbols, bool no_bypass) const
      {
         bool bypass = false;
         // if enabled, no semantic actions, and not explicitly ruled out
         if (m_enable_bypass && !node && !no_bypass)
         {
            // and only if one non terminal on right hand size
            if (right_rule_symbols.size() == 1 && !right_rule_symbols.front()->getSymbol()->isToken())
            {
               bypass = true;
            }
         }
         return bypass;
      }
   private:
      BasilCC &m_cc;
      bool m_enable_bypass;
      RulePtrVectorTrie m_left_symbol_rules;
      RulePtrVector m_rules;
      NodePtrTrie m_node_trie;
      NodePtrVector m_nodes;
   }
}

#hdr
#include <basilcc_node_ptr_vector.h>
#include <basilcc_rule_ptr_vector.h>
#include <basilcc_rule_symbol_ptr_vector.h>
#include <basilcc_symbol_ptr.h>
#include <string>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_node.h>
#include <basilcc_node_ptr_trie.h>
#include <basilcc_node_ptr_vector.h>
#include <basilcc_rule.h>
#include <basilcc_rule_ptr_vector_trie.h>
#include <basilcc_rule_symbol.h>
#include <basilcc_symbol.h>
#include <basilcc_symbol_api.h>
#include <basilcc_symbol_ptr_vector.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#include <map>
#include <sstream>
#include <stdexcept>
#end
