// symbol api functions
namespace basilcc
{
   class BasilCC;

   // add keyword with name
   void addKeyword(BasilCC &cc, char const *name, std::string const &lexeme)
   {
      return cc.getTable<SymbolTable>().addKeyword(name, lexeme);
   }

   // get symbol from name, returns existing symbol if already exists, otherwise, if non-terminal, will create a new one
   SymbolPtr getSymbol(BasilCC &cc, char const *name)
   {
      return cc.getTable<SymbolTable>().getSymbol(name);
   }
   SymbolPtr getSymbol(BasilCC &cc, std::string const & name)
   {
      return cc.getTable<SymbolTable>().getSymbol(cc.intern(name));
   }

   // get all tokens
   SymbolPtrVector const &getTokens(BasilCC const &cc)
   {
      return cc.getTable<SymbolTable>().getTokens();
   }

   // get nonterminals
   SymbolPtrVector const &getNonTerminals(BasilCC const &cc)
   {
      return cc.getTable<SymbolTable>().getNonTerminals();
   }

   // get start symbol
   SymbolPtr getStartSymbol(BasilCC const &cc)
   {
      return cc.getTable<SymbolTable>().getStartSymbol();
   }

   // get EOT symbol
   SymbolPtr getEOTSymbol(BasilCC const &cc)
   {
      return cc.getTable<SymbolTable>().getEOTSymbol();
   }

   // freeze symbols
   void freezeKeywords(BasilCC &cc)
   {
      return cc.getTable<SymbolTable>().freezeKeywords();
   }

   // get operator tokens
   SymbolPtrVector getOperators(BasilCC const &cc)
   {
      return cc.getTable<SymbolTable>().getOperators();
   }

   // get keyword tokens
   SymbolPtrVector getKeywords(BasilCC const &cc)
   {
      return cc.getTable<SymbolTable>().getKeywords();
   }

   // return true if name is a token, no lower case chars
   bool isToken(char const *name)
   {
      for (char const *p = name; *p != '\0'; ++p)
      {
         if (islower(*p))
         {
            return false;
         }
      }
      return true;
   }
}

using namespace basilcc;

namespace
{
   class SymbolTable : public Table
   {
   public:
      SymbolTable(BasilCC &cc)
      {
         m_eot = getSymbol(cc.intern("EOT"));
         m_start = getSymbol(cc.intern("start"));
      }
      ~SymbolTable()
      {
         deleteObjects(m_tokens.begin(), m_tokens.end());
         deleteObjects(m_nonterminals.begin(), m_nonterminals.end());
      }

      // set token as keyword, can be set at any point in grammar
      void addKeyword(char const *name, std::string const &lexeme)
      {
         if (!isToken(name))
         {
            std::ostringstream ss;
            ss << name << " is not a valid keyword symbol, tokens cannot contain lower case characters";
            throw std::runtime_error(ss.str());
         }
         SymbolPtr &symbol = m_symbols.insert(size_t(name), 0);
         if (symbol)
         {
            if (static_cast<Token const &>(*symbol).isKeyword())
            {
               std::ostringstream ss;
               ss << name << " has already been declared a keyword";
               throw std::runtime_error(ss.str());
            }
         }
         else
         {
            symbol = *m_tokens.insert(m_tokens.end(), new Token(0, name));
         }
         static_cast<Token &>(*symbol).setLexeme(lexeme);
      }

      // freeze, no more keywords
      void freezeKeywords()
      {
         // assign numbers to tokens, operators from 0, keywords from max_int - num_keywords,
         SymbolPtrVectorIter k = std::partition(m_tokens.begin(), m_tokens.end(), std::not1(IsKeyword()));
         int num = 0;
         for(SymbolPtrVectorIter i = m_tokens.begin(), endi = k; i != endi; ++ i, ++ num)
         {
            (*i)->setNumber(num);
         }
         // keyword lexemes are sorted in serialized FSM
         sort(k, m_tokens.end(), tokenLexemeLess);
         num = std::numeric_limits<int>::max() - int(m_tokens.end() - k);
         for (SymbolPtrVectorIter i = k, endi = m_tokens.end(); i != endi; ++ i, ++ num)
         {
            (*i)->setNumber(num);
         }
         m_keywords_beg = k;
      }

      // get symbol from name, returns existing symbol if already exists, otherwise, if non-terminal, will create a new one
      SymbolPtr getSymbol(char const *name)
      {
         SymbolPtr &symbol = m_symbols.insert(size_t(name), 0);
         if (! symbol)
         {
            if (isToken(name))
            {
               symbol = *m_tokens.insert(m_tokens.end(), new Token(0, name));
            }
            else
            {
               symbol = *m_nonterminals.insert(m_nonterminals.end(), new NonTerminal(int(m_nonterminals.size()), name));
            }
         }
         return symbol;
      }

      // get all tokens
      inline SymbolPtrVector const &getTokens() const
      {
         return m_tokens;
      }

      // get all non-terminals
      inline SymbolPtrVector const &getNonTerminals() const
      {
         return m_nonterminals;
      }

      // get start symbol
      inline SymbolPtr getStartSymbol() const
      {
         return m_start;
      }

      // get EOT symbl
      inline SymbolPtr getEOTSymbol() const
      {
         return m_eot;
      }

      // get operators
      inline SymbolPtrVector getOperators() const
      {
         return SymbolPtrVector(m_tokens.begin(), m_keywords_beg);
      }

      // get keywords
      inline SymbolPtrVector getKeywords() const
      {
         return SymbolPtrVector(m_keywords_beg, m_tokens.end());
      }

      enum { TABLE = TABLE_SYMBOL }
   private:
      // index of all symbols
      SymbolPtrTrie m_symbols;
      // eot and start symbols
      SymbolPtr m_eot, m_start;
      // operators and keywords
      SymbolPtrVector m_tokens;
      // start of keywords in tokens
      SymbolPtrVectorConstIter m_keywords_beg;
      // all nonterminals
      SymbolPtrVector m_nonterminals;
   };

   // true if keyword
   inline bool IsKeyword(; SymbolPtr token) const : std::unary_function<SymbolPtr, bool>
   {
      return static_cast<Token const &>(*token).isKeyword();
   }
}

#hdr
#include <basilcc_symbol_ptr_vector.h>
#include <string>
#include <vector>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_symbol.h>
#include <basilcc_symbol_ptr_trie.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#include <sstream>
#include <algorithm>
#include <functional>
#include <limits>
#include <stdexcept>
#end
