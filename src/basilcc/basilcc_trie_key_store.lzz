namespace basilcc
{
  // trie key
  template <class T, T TERM>
  class TrieKey
  {
  public:
    inline TrieKey (T const * data, unsigned int len)
      : m_data (data), m_len (len)
    {}
    // true if bit i is set
    inline int isBitSet (unsigned int i)
    {
      return ((i / NUM_BITS) < m_len) && ((m_data [i / NUM_BITS] & (1 << (i % NUM_BITS))) != 0);
    }
    // get first different bit
    int getDiffBit (T const * data)
    {
      unsigned int i, j, x;
      // get first diff element
      for (i = 0; m_data [i] == data [i]; i ++);
      // get first diff bit
      for (x = m_data [i] ^ data [i], j = 0; ! (x & (1 << j)); j ++);
      return (i * NUM_BITS) + j;
    }
    // compare data, return true if same
    bool compare (TrieKey <T, TERM> const & other)
    {
      return (m_len == other.m_len) && (memcmp (m_data, other.m_data, sizeof (T) * m_len) == 0);
    }
    // get key length
    inline int getLength () const
    {
      return m_len;
    }
    // get pointer to data
    inline T const * getData () const
    {
      return m_data;
    }
    // true if key points to same data
    inline bool operator == (TrieKey const & key)
    {
      return m_data == key.m_data;
    }
  private:
    // pointer to data, owned by store
    T const * m_data;
    // length of data
    unsigned int m_len;
    // number of bits in T
    enum { NUM_BITS = sizeof (T) * 8 }
  }

  // key manager
  template <class T, T TERM, size_t BLOCKSIZE>
  class TrieKeyStore
  {
  public:
    // constructor
    TrieKeyStore ()
      : m_blocks (0)
    {
      m_blocks = new Block (m_blocks);
    }
    // destructor
    ~ TrieKeyStore ()
    {
      while (Block * block = m_blocks)
      {
        m_blocks = block->m_prev;
        delete block;
      }
    }
    // append to current key
    void push (T t)
    {
      if (! m_blocks->push (t))
      {
        unsigned int len = 0;
        T const * beg = m_blocks->getBeg (len);
        m_blocks = new Block (m_blocks, beg, len);
        m_blocks->push (t);
      }
    }
    // freeze and return current key
    TrieKey <T, TERM> freeze ()
    {
      push (TERM);
      unsigned int len = 0;
      T const * beg = m_blocks->getBeg (len);
      return TrieKey <T, TERM> (beg, len);
    }
    // discard current key
    inline void discard ()
    {
      m_blocks->discard ();
    }
    // commit current key
    inline void commit ()
    {
      return m_blocks->commit ();
    }
  private:
    struct Block
    {
      Block (Block * prev)
        : m_prev (prev)
      {
        unsigned int size = BLOCKSIZE;
        m_data = new T [size];
        m_cur = m_data;
        m_end = m_data + size;
        m_beg = m_data;
      }
      // constructor with initial key
      Block (Block * prev, T const * beg, unsigned int len)
        : m_prev (prev)
      {
        unsigned int size = (len >= BLOCKSIZE) ? (len + BLOCKSIZE / 2) : (BLOCKSIZE);
        m_data = new T [size];
        memcpy (m_data, beg, len * sizeof (T));
        m_cur = m_data + len;
        m_end = m_data + size;
        m_beg = m_data;
      }
      ~ Block ()
      {
        delete [] m_data;
      }
      // append to current key
      inline bool push (T t)
      {
        if (m_cur == m_end)
        {
          return false;
        }
        * m_cur ++ = t;
        return true;
      }
      // discard current key
      inline void discard ()
      {
        m_cur = m_beg;
      }
      // commit current key
      inline void commit ()
      {
        m_beg = m_cur;
      }
      // get address of current key and set length
      inline T const * getBeg (unsigned int & len) const
      {
        len = m_cur - m_beg;
        return m_beg;
      }
      // previous block
      Block * m_prev;
    private:
      // data
      T * m_data;
      // current index
      T * m_cur;
      // one past last index
      T * m_end;
      // start of current key
      T * m_beg;
    }
  private:
    // key block list
    Block * m_blocks;
  }

  template class TrieKey <size_t, 0xFFFFFFFF>;
  template class TrieKeyStore <size_t, 0xFFFFFFFF, 512>;
  template class TrieKey <char, 0>;
  template class TrieKeyStore <char, 0, 128>;
}

#pragma tpl

#hdr
#include <assert.h>
#include <stddef.h>
#include <string.h>
#end

#src
#include <basilcc_trie_key_store.tpl>
#end
