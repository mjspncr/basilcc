namespace basilcx {

class Workspace;

// set symbol goto shift states
void set_goto(Workspace &w)
{
    typedef std::map<Symbol *, ShiftStateVector> SymbolShiftStateVectorMap;
    SymbolShiftStateVectorMap symbol_shift_states;
    for (ShiftSel *shift_sel : w.shift_sels.get_shift_sels()) {
        int shift_sel_num = shift_sel->_num;
        for (Shift const &shift : shift_sel->get_shifts()) {
            symbol_shift_states[shift.get_symbol()].push_back(ShiftState(shift_sel_num, shift.get_state()));
        }
    }
    SymbolVector const &nonterminals = w.symbols.get_nonterminals();
    for (Symbol *symbol : nonterminals) {
        SymbolShiftStateVectorMap::iterator p = symbol_shift_states.find(symbol);
        if (p != symbol_shift_states.end()) {
            ShiftStateVector &shift_states = p->second;
            // get default state
            std::sort(shift_states.begin(), shift_states.end(), ShiftStateLessState());
            typedef std::pair<ShiftStateVector::iterator, ShiftStateVector::iterator> ShiftStateVectorRange;
            ShiftStateVectorRange def_shift_states = most(shift_states.begin(), shift_states.end(), ShiftStateSameState());
            State *def_state = def_shift_states.first->get_state();
            shift_states.erase(def_shift_states.first, def_shift_states.second);
            // reorder remaining by shift number then save to symbol 
            std::sort(shift_states.begin(), shift_states.end(), ShiftStateLess());
            static_cast<Nonterminal *>(symbol)->set_goto(shift_states, def_state);
        }
    }
}

namespace {

// true if a.state < b.state
inline bool ShiftStateLessState(; ShiftState const &a, ShiftState const &b) const
{
    // compare numbers so will get consistent results
    return a.get_state()->_num < b.get_state()->_num;
}

// true if a.state == b.state
inline bool ShiftStateSameState(; ShiftState const &a, ShiftState const &b) const
{
    return a.get_state() == b.get_state();
}

// true if a.shift_number < b.shift_number
inline bool ShiftStateLess(; ShiftState const &a, ShiftState const &b) const
{
    return a.get_shift_number() < b.get_shift_number();
}

} // unnamed
} // basilcx

#hdr
#include <map>
#end

#src
#include <basilcx_shift.h>
#include <basilcx_shift_sel.h>
#include <basilcx_shift_state.h>
#include <basilcx_state.h>
#include <basilcx_symbol.h>
#include <basilcx_util.h>
#include <basilcx_workspace.h>

#include <algorithm>
#end
