namespace basilcc
{
   class BasilCC;

   // freeze follow rule, return shared rule, reuse follow_rule or delete it
   FollowRulePtr freezeFollowRule(BasilCC &cc, FollowRulePtr &follow_rule)
   {
      follow_rule->freeze(cc);
      return cc.getTable <FollowRuleTable>().freeze(follow_rule);
   }

   // freeze follow rule functor
   inline FollowRulePtr FreezeFollowRule(BasilCC &cc; FollowRulePtr &follow_rule)
   {
      return freezeFollowRule(cc, follow_rule);
   }

   // get follow rule from components
   FollowRulePtr getFollowRule(BasilCC &cc, ShiftRulePtr shift_rule, FollowPtr follow)
   {
      return cc.getTable <FollowRuleTable>().getFollowRule(shift_rule, follow);
   }

   // advance dot and return shared rule
   FollowRulePtr getNextFollowRule(BasilCC &cc, FollowRulePtr follow_rule)
   {
      return getFollowRule(cc, getNextShiftRule(cc, follow_rule->getShiftRule()), follow_rule->getFollow());
   }
}

using namespace basilcc;

namespace
{
   class FollowRuleTable : public Table
   {
   public:
      FollowRuleTable(BasilCC &cc)
      {}
      ~ FollowRuleTable()
      {
         deleteObjects(m_follow_rules.begin(), m_follow_rules.end());
      }

      // freeze follow rule, reuse follow_rule or delete it
      FollowRulePtr freeze(FollowRulePtr &follow_rule)
      {
         m_follow_rule_trie.push(size_t(follow_rule->getShiftRule()));
         m_follow_rule_trie.push(size_t(follow_rule->getFollow()));
         FollowRulePtr shared_follow_rule = m_follow_rule_trie.commit(follow_rule);
         if (shared_follow_rule == follow_rule)
         {
            m_follow_rules.push_back(shared_follow_rule);
         }
         else
         {
            deleteObject(follow_rule);
         }
         return shared_follow_rule;
      }

      // get follow rule from shift rule and follow
      FollowRulePtr getFollowRule(ShiftRulePtr shift_rule, FollowPtr follow)
      {
         m_follow_rule_trie.push(size_t(shift_rule));
         m_follow_rule_trie.push(size_t(follow));
         FollowRulePtr &follow_rule = m_follow_rule_trie.commit(0);
         if (!follow_rule)
         {
            follow_rule = new FollowRule(shift_rule, follow);
         }
         return follow_rule;
      }

      enum { TABLE = TABLE_FOLLOW_RULE }
   private:
      FollowRulePtrTrie m_follow_rule_trie;
      FollowRulePtrVector m_follow_rules;
   }
}

#hdr
#include <basilcc_follow_ptr.h>
#include <basilcc_follow_rule_ptr.h>
#include <basilcc_shift_rule_ptr.h>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_follow_ptr.h>
#include <basilcc_follow_rule.h>
#include <basilcc_follow_rule.h>
#include <basilcc_follow_rule_ptr_trie.h>
#include <basilcc_follow_rule_ptr_vector.h>
#include <basilcc_shift_rule_api.h>
#include <basilcc_shift_rule_ptr.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#end
