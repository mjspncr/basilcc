namespace basil
{
  class Lexer;
  class ErrorStream;
  typedef std::vector <int> IntVector;
  typedef IntVector::iterator IntVectorIter;

  class Parser
  {
  public:
    Parser (lua_State * L, Engine & engine, int app, Lexer & lexer, ErrorStream & error_stream)
      : L (L), engine (engine), app (app), lexer (lexer), error_stream (error_stream)
    {}
    ~ Parser ()
    {}

    void parse (int start_state)
    {
      Stack stack (L);
      stack.push_back (Frame (start_state));
      for (;;)
      {
        Stack good_stack (L, stack);
        int r = parseSome (stack);
        if (r == PARSER_FAIL)
        {
          Token const & error_token = getToken (tokens [stack.token_pos]);
          error_stream.error (Message (error_token.loc, "Unexpected '%'") << error_token.lexeme);
          stack.move (good_stack);
          r = recover (stack);
          if (r == PARSER_FAIL)
          {
            throw ParseError ("Failed to recover after syntax error");
          }
        }
        clearTokens (0, stack.token_pos);
        stack.token_pos = 0;
        if (r == PARSER_DONE)
        {
          break;
        }
      }
    }

    // types
    struct Frame (int state, int guess_cnt = 0, int form = LUA_NOREF) {}
    typedef std::vector <Frame> FrameVector;
    typedef FrameVector::const_iterator FrameVectorConstIter;
    typedef FrameVector::iterator FrameVectorIter;

    // parser stack
    struct Stack : FrameVector
    {
      Stack (lua_State * L)
        : L (L), token_pos (0), guess_cnt (0)
      {}
      Stack (lua_State * L, Stack const & other)
        : L (L), token_pos (0), guess_cnt (0)
      {
        copy (other);
      }
      ~ Stack ()
      {
        clear ();
      }
      // copy other stack
      void copy (Stack const & other)
      {
        clear ();
        reserve (other.size ());
        for (FrameVectorConstIter i = other.begin (), endi = other.end (); i != endi; ++ i)
        {
          Frame const & other_frame = * i;
          push_back (Frame (other_frame.state, other_frame.guess_cnt, copy_ref (L, other_frame.form)));
        }
        token_pos = other.token_pos;
        guess_cnt = other.guess_cnt;
      }
      // move/take other stack
      void move (Stack & other)
      {
        clear ();
        FrameVector::swap (other);
        token_pos = other.token_pos;
        guess_cnt = other.guess_cnt;
      }
    private:
      // lua state intended just for cleanup
      lua_State * L;
      // clear 
      inline void clear ()
      {
        for (FrameVectorIter i = begin (), endi = end (); i != endi ; ++ i)
        {
          luaL_unref (L, LUA_REGISTRYINDEX, i->form);
        }
        token_pos = 0;
        guess_cnt = 0;
        FrameVector::clear ();
      }
    public:
      int token_pos;
      int guess_cnt;
    }

    // parser snapshot, stack plus actions
    struct Snapshot : Stack
    {
      Snapshot (lua_State * L)
        : Stack (L)
      {}
      ~ Snapshot ()
      {}
      // snap parser state, copy stack and actions
      void snap (Stack const & other, FSM::ActionPtrPair const & actions)
      {
        Stack::copy (other);
        this->actions = actions;
      }
      FSM::ActionPtrPair actions;
    };
    typedef std::deque <Snapshot> SnapshotDeque;

    // token
    struct Token
    {
      inline Token (int number, Loc const & loc, std::string const & lexeme)
        : number (number), loc (loc), lexeme (lexeme) {}
      ~ Token () {}
      int number;
      Loc loc;
      std::string lexeme;
    }
    typedef Token const * TokenPtr;

    // register token class  
    static void registerToken (lua_State * L)
    {
      luaL_newmetatable (L, MT_TOKEN);
      lua_pushcfunction (L, token_gc);
      lua_setfield (L, -2, "__gc");
      lua_pushcfunction (L, token_index);
      lua_setfield (L, -2, "__index");
      lua_pop (L, 1);
    }

    // get token from Lua reference
    Parser::Token const & getToken (int ref)
    {
      lua_rawgeti (L, LUA_REGISTRYINDEX, ref);
      Token const * token_ptr = static_cast <Token *> (luaL_testudata (L, -1, MT_TOKEN));
      lua_pop (L, 1);
      return * token_ptr;
    }
    // create token, return Lua reference
    int createToken (int number, Loc const & loc, std::string const & lexeme)
    {
      new (lua_newuserdata (L, sizeof (Token))) Token (number, loc, lexeme);
      luaL_setmetatable (L, MT_TOKEN);
      return luaL_ref (L, LUA_REGISTRYINDEX);
    }

    // release token references, num tokens from pos
    void clearTokens (int pos, int num)
    {
      IntVectorIter beg = tokens.begin () + pos;
      IntVectorIter end = beg + num;
      for (IntVectorIter i = beg; i != end; ++ i)
      {
        luaL_unref (L, LUA_REGISTRYINDEX, * i);
      }
      tokens.erase (beg, end);
    }

    // get token number at pos, lex next token if needed
    int getTokenNumber (int state, int pos)
    {
      if (size_t (pos) < tokens.size ())
      {
        return getToken (tokens [pos]).number;
      }
      assert (size_t (pos) == tokens.size ());
      Loc loc;
      string lexeme;
      int number = lexer.getNextToken (engine.getLexState (state), loc, lexeme);
      tokens.push_back (createToken (number, loc, lexeme));
      return number;
    }

    // lookup actions for state at top of stack
    FSM::ActionPtrPair lookup (Stack const & stack)
    {
      int state = stack.back ().state;
      return engine.getActionSeq (state, getTokenNumber (state, stack.token_pos));
    }

    // shift current token and advance token, guess true if this is a guess
    void shift (Stack & stack, FSM::ActionPtr action, bool guess)
    {
      stack.push_back (Frame (action->arg1, guess ? 1 : 0, copy_ref (L, tokens [stack.token_pos])));
      ++ stack.token_pos;
    }

    // parser reduce codes
    enum
    {
      PARSER_OK,
      PARSER_ACCEPT,
      PARSER_DONE,
      PARSER_FAIL,
    }

    // reduce and run semantic actions
    int reduce (Stack & stack, FSM::ActionPtr action, bool guess, int & num_cancel)
    {
      int kind = action->kind;
      FSM::Rule const & rule = engine.getRule (action->arg1);
      int shortcut = action->arg2;
      int guess_cnt = guess ? 1 : 0;
      int form = LUA_NOREF;
      if (rule.node == FSM::NOINDEX && rule.size == 1)
      {
        Frame const & frame = stack.back ();
        guess_cnt += frame.guess_cnt;
        form = frame.form;
        stack.pop_back ();
      }
      else
      {
        // create table with children in array
        lua_createtable (L, rule.size, 0);
        FrameVectorIter begi = stack.end () - rule.size, endi = stack.end ();
        for (FrameVectorIter i = begi; i != endi ; ++ i)
        {
          Frame const & frame = * i;
          guess_cnt += frame.guess_cnt;
          if (frame.form == LUA_NOREF)
          {
            lua_pushnil (L);
          }
          else
          {
            lua_rawgeti (L, LUA_REGISTRYINDEX, frame.form);
            luaL_unref  (L, LUA_REGISTRYINDEX, frame.form);
          }
          lua_rawseti (L, -2, int (i - begi) + 1);
        }
        stack.erase (begi, endi);
        if (rule.node == FSM::NOINDEX)
        {
          // discard all children
          lua_pop (L, 1);
        }
        else
        {
          form = engine.onNode (app, rule.node);
        }
      }
      int r = PARSER_OK;
      if (kind == FSM::DONE)
      {
        assert (stack.size () == 1);
        num_cancel = guess_cnt;
        assert (num_cancel == stack.guess_cnt);
        stack.back ().form = form;
        r = PARSER_DONE;
      }
      else
      {
        int s1 = stack.back ().state;
        int s2 = engine.getGotoState (s1, shortcut);
        if (kind == FSM::ACCEPT)
        {
          num_cancel = guess_cnt;
          assert (num_cancel <= stack.guess_cnt);
          guess_cnt = 0;
          stack.guess_cnt -= num_cancel;
          if (stack.guess_cnt == 0)
          {
            r = PARSER_ACCEPT;
          }
        }
        stack.push_back (Frame (s2, guess_cnt, form));
      }
      return r;
    }

    // parse until next accept or done
    int parseSome (Stack & stack)
    {
      SnapshotDeque snapshots;
      for (;;)
      {
        FSM::ActionPtrPair actions = lookup (stack);
        if (actions.first == actions.second)
        {
          if (snapshots.empty ())
          {
            return PARSER_FAIL;
          }
          // backtrack
          Snapshot & snapshot = snapshots.back ();
          stack.move (snapshot);
          actions = snapshot.actions;
          snapshots.pop_back ();
        }
        FSM::ActionPtr action = actions.first;
        bool guess = ++ actions.first != actions.second;
        if (guess)
        {
          Snapshot & snapshot = * snapshots.insert (snapshots.end (), Snapshot (L));
          snapshot.snap (stack, actions);
          ++ stack.guess_cnt;
        }
        if (action->kind == FSM::SHIFT)
        {
          shift (stack, action, guess);
        }
        else
        {
          int num_cancel = 0;
          int r = reduce (stack, action, guess, num_cancel);
          // cancel pending parsers
          num_cancel = min (num_cancel, int (snapshots.size ()));
          for (; num_cancel > 0; -- num_cancel)
          {
            snapshots.pop_back ();
          }
          if (r == PARSER_DONE || r == PARSER_ACCEPT)
          {
            return r;
          }
        }
      }
    }

    // try to recover from a syntax error, stack is last accepted stack
    int recover (Stack & stack)
    {
      Stack save_stack (L, stack);
      int r = PARSER_FAIL;
      FSM::RecoverStrategyVector const & strategies = engine.getRecoverStrategies ();
      for (FSM::RecoverStrategyVectorConstIter i = strategies.begin (), endi = strategies.end (); i != endi; ++ i)
      {
        FSM::RecoverStrategy const & strategy = * i;
        if (strategy.type == FSM::STRATEGY_INSERT)
        {
          r = recoverInsert (stack, strategy.arg);
        }
        else if (strategy.type == FSM::STRATEGY_DISCARD)
        {
          r = recoverDiscard (stack, strategy.arg);
        }
        if (r == PARSER_ACCEPT || r == PARSER_DONE)
        {
          break;
        }
        stack.copy (save_stack);
      }
      return r;
    }

    // recover by discarding up to max_num tokens 
    int recoverDiscard (Stack & stack, int max_num)
    {
      Stack init_stack (L, stack);
      for (int num = 1; num <= max_num; ++ num)
      {
        for (;;)
        {
          int i = 0;
          // assumes TOKEN_EOT is 0
          while (i < num && getTokenNumber (stack.back ().state, stack.token_pos + i) != 0)
          {
            ++ i;
          }
          if (i != num)
          {
            break;
          }
          Stack save_stack (L, stack);
          stack.token_pos += num;
          int r = parseSome (stack);
          if (r == PARSER_ACCEPT || r == PARSER_DONE)
          {
            return r;
          }
          stack.move (save_stack);
          if (! parseShift (stack))
          {
            break;
          }
        }
        stack.copy (init_stack);
      }
      return PARSER_FAIL;
    }

    // recover by inserting token
    int recoverInsert (Stack & stack, int token_num)
    {
      // work backwards from last token lexed 
      for (int p = int (tokens.size ()) - 1; p >= 0; -- p)
      {
        Token const & token = getToken (tokens [p]);
        if (token.number == token_num)
        {
          continue;
        }
        tokens.insert (tokens.begin () + p, createToken (token_num, token.loc, string ()));
        Stack save_stack (L, stack);
        int r = parseSome (stack);
        if (r == PARSER_ACCEPT || r == PARSER_DONE)
        {
          return r;
        }
        stack.move (save_stack);
        // remove inserted token
        clearTokens (p, 1);
      }
      return PARSER_FAIL;
    }

    // parse until shift one token, true if shift, false if error
    bool parseShift (Stack & stack)
    {
      for (;;)
      {
        FSM::ActionPtrPair actions = lookup (stack);
        if (actions.first == actions.second)
        {
          return false;
        }
        FSM::ActionPtr action = actions.first;
        bool guess = ++ actions.first != actions.second;
        if (guess)
        {
          ++ stack.guess_cnt;
        }
        if (action->kind == FSM::SHIFT)
        {
          shift (stack, action, guess);
          return true;
        }
        else
        {
          int num_cancel = 0;
          int r = reduce (stack, action, guess, num_cancel);
          // because shifting one token (from last accept) after syntax error shouln't get
          // ACCEPT or DONE
          assert (r == PARSER_OK);
        }
      }
    }

  private:
    // token garbage collector
    static int token_gc (lua_State * L)
    {
      Token * token = (Token *) lua_touserdata (L, 1);
      token->Token::~ Token ();
      return 0;
    }

    // token index for loc and lexeme
    static int token_index (lua_State * L)
    {
      Token const & token = * static_cast <Token *> (lua_touserdata (L, 1));
      char const * key = lua_tostring (L, 2);
      if (strcmp (key, "loc") == 0)
      {
        pushLoc (L, token.loc);
      }
      else if (strcmp (key, "lexeme") == 0)
      {
        lua_pushstring (L, token.lexeme.c_str ());
      }
      else
      {
        luaL_argerror (L, 2, "invalid token property");
      }
      return 1;
    }

  private:
    lua_State * L;
    Engine & engine;
    int app;
    Lexer & lexer;
    ErrorStream & error_stream;
    // tokens (references) from last accept
    IntVector tokens;
  }
}

using namespace std;

namespace
{
  // create new reference to object
  int copy_ref (lua_State * L, int ref)
  {
    if (ref != LUA_NOREF)
    {
      lua_rawgeti (L, LUA_REGISTRYINDEX, ref);
      ref = luaL_ref (L, LUA_REGISTRYINDEX);
    }
    return ref;
  }

  char const MT_TOKEN [] = "TOKEN";
}

#hdr
#include <basil/engine.h>
#include <basil/loc.h>
#include <lua.hpp>
#include <deque>
#include <vector>
#end

#src
#include <basil/error_stream.h>
#include <basil/lexer.h>
#include <basil/loc_lua.h>
#include <basil/message.h>
#include <basil/parse_error.h>
#include <cassert>
#include <cstring>
#end
