// action seq table

namespace basilcc {

typedef std::set<ActionSeq const *, ActionSeqLess> ActionSeqSet;

class ActionSeqTable {
  public:
    ActionSeqTable()
    {}

    ~ActionSeqTable()
    {
        delete_objects(_action_seqs);
    }

    // get shared action seq, steals actions
    ActionSeq const *get_action_seq(ActionVector &actions)
    {
        std::unique_ptr<ActionSeq> action_seq_ptr(new ActionSeq(actions));
        std::pair<ActionSeqSet::iterator, bool> r = _action_seqs.insert(action_seq_ptr.get());
        if (r.second) {
            action_seq_ptr->_num = _action_seqs.size() - 1;
            action_seq_ptr.release();
        }
        return *r.first;
    }

    inline ActionSeqSet const &get_action_seqs() const
    {
        return _action_seqs;
    }

  private:
    ActionSeqSet _action_seqs;
};

} // namespace basilcc

#hdr
#include <basilcc_action_seq.h>
#include <set>
#end

#src
#include <basilcc_util.h>
#include <memory>
#end
