namespace basil
{
  class ErrorStream;
  class Lexer;

  // engine is an FSM with loaded app (node and app metatables)
  class Engine : public FSM
  {
  public:
    Engine (lua_State * L, std::string const & fsm_filename, TokenNumberPtr token_numbers_beg, TokenNumberPtr token_numbers_end)
      : FSM (fsm_filename, token_numbers_beg, token_numbers_end), L (L), m_app_mt (LUA_NOREF)
    {}
    Engine (lua_State * L, std::string const & fsm_filename, TokenNumberPtr token_numbers_beg, TokenNumberPtr token_numbers_end,
        std::string const & app_filename)
      : FSM (fsm_filename, token_numbers_beg, token_numbers_end), L (L), m_app_mt (LUA_NOREF)
    {
      load (app_filename);
    }

    ~ Engine ()
    {
      // unref metatables
      luaL_unref (L, LUA_REGISTRYINDEX, m_app_mt);
      for (IntVectorConstIter i = m_node_mts.begin (), endi = m_node_mts.end (); i != endi; ++ i)
      {
        luaL_unref (L, LUA_REGISTRYINDEX, * i);
      }
    }

    // load app
    void load (std::string const & app_filename)
    {
      Loader (L, getNodes (), m_app_mt, m_node_mts).load (app_filename);
    }

    // create new app instance
    int newApp ()
    {
      if (m_app_mt == LUA_NOREF)
      {
        // no app created
        return LUA_NOREF;
      }
      // create app instance, set app_mt as metatable
      lua_newtable (L);
      lua_rawgeti (L, LUA_REGISTRYINDEX, m_app_mt);
      lua_setmetatable (L, -2);
      // save copy
      lua_pushvalue (L, -1);
      // call init function if exits
      lua_getfield (L, -1, "init");
      if (lua_isnil (L, -1))
      {
        lua_pop (L, 2);
      }
      else
      {
        // init function first then instance
        lua_rotate (L, -2, 1);
        // call it, don't expect any return argument
        if (lua_pcall (L, 1, 0, 1) != LUA_OK)
        {
          string errmsg = lua_tostring (L, -1);
          lua_pop (L, 1);
          throw runtime_error (errmsg);
        }
      }
      return luaL_ref (L, LUA_REGISTRYINDEX);
    }

    // delete app instance
    void deleteApp (int app_ref)
    {
      luaL_unref (L, LUA_REGISTRYINDEX, app_ref);
    }

    // parse tokens
    void parse (int app_ref, Lexer & lexer, ErrorStream & error_stream, int start_state = 0)
    {
      Parser (L, * this, app_ref, lexer, error_stream).parse (start_state);
    }

    // call app finalize method (if defined)
    void finalize (int app)
    {
      if (app != LUA_NOREF)
      {
        lua_rawgeti (L, LUA_REGISTRYINDEX, app);
        lua_getfield (L, -1, "finalize");
        if (lua_isnil (L, -1))
        {
          lua_pop (L, 2);
        }
        else
        {
          lua_rotate (L, -2, 1);
          if (lua_pcall (L, 1, 0, 1) != LUA_OK)
          {
            string errmsg = lua_tostring (L, -1);
            lua_pop (L, 1);
            throw runtime_error (errmsg);
          }
        }
      }
    }

    // call semantic actions on rule node, children in table on top of stack
    int onNode (int app, int node)
    {
      // turn table into a node
      lua_rawgeti (L, LUA_REGISTRYINDEX, m_node_mts [node]);
      lua_setmetatable (L, -2);
      // call user onNode method if defined
      lua_getfield (L, -1, "onNode");
      if (lua_isnil (L, -1))
      {
        lua_pop (L, 1);
      }
      else
      {
        // first function then node
        lua_rotate (L, -2, 1);
        // then app
        if (app == LUA_NOREF)
        {
          lua_pushnil (L);
        }
        else
        {
          lua_rawgeti (L, LUA_REGISTRYINDEX, app);
        }
        if (lua_pcall (L, 2, 1, 1) != LUA_OK)
        {
          string errmsg = lua_tostring (L, -1);
          lua_pop (L, 1);
          throw runtime_error (errmsg);
        }
      }
      // return ref to object on top of stack
      return luaL_ref (L, LUA_REGISTRYINDEX);
    }

  private:
    lua_State * const L;

    // app metatable
    int m_app_mt;
    // node metatables
    IntVector m_node_mts;
  }
}

using namespace basil;
using namespace std;

namespace
{
  typedef std::vector <string> StringVector;
  typedef StringVector::const_iterator StringVectorConstIter;
  typedef IntVector::const_iterator IntVectorConstIter;

  class Loader
  {
  public:
    Loader (lua_State * L, StringVector const & nodes, int & app_mt, IntVector & node_mts)
      : L (L), m_nodes (nodes), m_app_mt (app_mt), m_node_mts (node_mts)
    {
      m_node_mts.resize (m_nodes.size (), LUA_NOREF);
    }
    ~ Loader ()
    {
      // unregister funcs
      for (luaL_Reg const * i = loader_funcs, * endi = ARRAY_END (loader_funcs); i != endi; ++ i)
      {
        lua_pushnil (L);
        lua_setglobal (L, i->name);
      }
    }
    // run loader, parse app filename, set node metatable array and return app metatable
    void load (string const & filename)
    {
      // register global loader functions with loader as upvalue
      for (luaL_Reg const * i = loader_funcs, * endi = ARRAY_END (loader_funcs); i != endi; ++ i)
      {
        lua_pushlightuserdata (L, this);
        lua_pushcclosure (L, i->func, 1);
        lua_setglobal (L, i->name);
      }
      // parse lua app
      if (luaL_dofile (L, filename.c_str ()))
      {
        string errmsg = lua_tostring (L, -1);
        lua_pop (L, 1);
        throw runtime_error (errmsg);
      }
      // make sure all nodes defined
      for (IntVectorConstIter i = m_node_mts.begin (), endi = m_node_mts.end (); i != endi; ++ i)
      {
        if (* i == LUA_NOREF)
        {
          throw runtime_error (Message ("node % not defined") << m_nodes [i - m_node_mts.begin ()]);
        }
      }
    }          
    // node callback  
    int onNode ()
    {
      char const * name = luaL_checkstring (L, 1);
      {
        try
        {
          // node names are sorted
          StringVectorConstIter i = lower_bound (m_nodes.begin (), m_nodes.end (), name);
          if (i == m_nodes.end () || * i != name)
          {
            throw runtime_error (Message ("% is not a valid node name") << name);
          }
          int & node_mt = m_node_mts [i - m_nodes.begin ()];
          if (node_mt != LUA_NOREF)
          {
            throw runtime_error (Message ("% is already defined") << name);
          }
          node_mt = pushMetatable ();
          return 1;
        }
        catch (exception const & e)
        {
          m_errmsg = e.what ();
        }
        catch (...)
        {
          m_errmsg = "unknown exception";
        }
      }
      return luaL_error (L, m_errmsg.c_str ());
    }
    // app callback
    int onApplication ()
    {
      {
        try
        {
          if (m_app_mt != LUA_NOREF)
          {
            throw runtime_error ("application already defined");
          }
          m_app_mt = pushMetatable ();
          return 1;
        }
        catch (exception const & e)
        {
          m_errmsg = e.what ();
        }
        catch (...)
        {
          m_errmsg = "unknown exception";
        }
      }
      return luaL_error (L, m_errmsg.c_str ());
    }

  private:
    // create metatable, save in registry and return ref, leave copy on stack
    int pushMetatable ()
    {
      lua_newtable (L);
      lua_pushvalue (L, -1);
      lua_setfield (L, -2, "__index");
      lua_pushvalue (L, -1);
      return luaL_ref (L, LUA_REGISTRYINDEX);
    }
  private:
    lua_State * L;
    // sorted node names 
    StringVector const & m_nodes;
    // app metatable
    int & m_app_mt;
    // node metatables indexed by node
    IntVector & m_node_mts;
    // buffer for lua error message
    string m_errmsg;
  }
  // loader functions
  int on_node (lua_State * L)
  {
    return ((Loader *) lua_touserdata (L, lua_upvalueindex (1)))->onNode ();
  }    
  int on_application (lua_State * L)
  {
    return ((Loader *) lua_touserdata (L, lua_upvalueindex (1)))->onApplication ();
  }
  luaL_Reg loader_funcs [] =
  {
    { "node", on_node },
    { "application", on_application },
  };
}

#hdr
#include <basil/fsm.h>
#include <string>
#include <vector>
#include <lua.hpp>
#end

#src
#include <basil/message.h>
#include <basil/parser.h>
#include <algorithm>
#include <stdexcept>

#define ARRAY_SIZE(X) (sizeof (X) / sizeof (X [0]))
#define ARRAY_END(X)  (X + ARRAY_SIZE(X))
#end
