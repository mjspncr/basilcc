namespace basilcc
{
  class BasilCC;

  namespace rule_lexer
  {
    basil::TokenNumber const token_numbers [] =
    {
      { "EOT",     RULE_TOKEN_EOT },
      { "ARROW",   RULE_TOKEN_ARROW },
      { "LBRACK",  RULE_TOKEN_LBRACK },
      { "IDENT",   RULE_TOKEN_IDENT },
      { "RBRACK",  RULE_TOKEN_RBRACK },
      { "LPAREN",  RULE_TOKEN_LPAREN },
      { "RPAREN",  RULE_TOKEN_RPAREN },
      { "GT",      RULE_TOKEN_GT },
      { "PLUS",    RULE_TOKEN_PLUS },
      { "NUMBER",  RULE_TOKEN_NUMBER },
      { "STAR",    RULE_TOKEN_STAR },
      { "LT",      RULE_TOKEN_LT },
      { "CARET",   RULE_TOKEN_CARET },
      { "BANG",    RULE_TOKEN_BANG },
      { "LBRACE",  RULE_TOKEN_LBRACE },
      { "RBRACE",  RULE_TOKEN_RBRACE },
      { "COLON",   RULE_TOKEN_COLON },
      { "EQUALS",  RULE_TOKEN_EQUALS },
    };
    basil::TokenNumberPtr token_numbers_end = ARRAY_END (token_numbers);

    // rule file reader
    class RuleReader
    {
    public:
      RuleReader (std::string const & filename)
        : m_filename (filename), m_fp (0), m_line (1), m_col (1), m_newline (true), m_lb (0), m_le (0)
      {}
      ~ RuleReader ()
      {
        if (m_fp)
        {
          fclose (m_fp);
        }
      }
      // peek char
      char peekChar (int n = 0)
      {
        int i = (m_lb + n) % MAX_LOOKAHEAD;
        if (i == m_le)
        {
          m_lookahead [m_le] = readChar ();
          m_le = (m_le + 1) % MAX_LOOKAHEAD;
        }
        return m_lookahead [i];
      }
      // get char
      char nextChar ()
      {
        char ch;
        if (m_lb == m_le)
        {
          ch = readChar ();
        }
        else
        {
          ch = m_lookahead [m_lb];
          m_lb = (m_lb + 1) % MAX_LOOKAHEAD;
        }
        // make sure eof is preceeded by newline
        if (ch == 0 && ! m_newline)
        {
          m_lookahead [m_le] = 0;
          m_le = (m_le + 1) % MAX_LOOKAHEAD;
          ch = '\n';
        }
        if (m_newline)
        {
          m_newline = false;
          ++ m_line;
          m_col = 0;
        }
        ++ m_col;
        m_newline = (ch == '\n');
        return ch;
      }
      // get location of last char returned
      basil::Loc getLocation ()
      {
        return basil::Loc (m_filename.c_str (), m_line, m_col);
      }
    private:
      // read char from file
      char readChar ()
      {
        // open file on first read
        if (! m_fp)
        {
          m_fp = fopen (m_filename.c_str (), "r");
          if (! m_fp)
          {
            throw runtime_error (Message ("unable to open file: %") << m_filename);
          }
        }
        // get character, eof is 0
        char ch = fgetc (m_fp);
        if (ch == EOF)
        {
          ch = 0;
        }
        return ch;
      }
    private:
      // max lookahead
      enum { MAX_LOOKAHEAD = 16 };
      // filename
      std::string m_filename;
      // file
      FILE * m_fp;
      // current line
      int m_line;
      // current column
      int m_col;
      // true if start of line
      bool m_newline;
      // lookahead circular buffer for peekChar()
      char m_lookahead [MAX_LOOKAHEAD];
      // lookahead indices: begin and end
      int m_lb, m_le;
    };

    // operators
    class RuleOperTable
    {
    public:
      RuleOperTable ()
      {
        struct
        {
          char const * name;
          int number;
        }
        tbl [] =
        {
          { "!",    RULE_TOKEN_BANG },
          { "(",    RULE_TOKEN_LPAREN },
          { ")",    RULE_TOKEN_RPAREN },
          { "*",    RULE_TOKEN_STAR },
          { "+",    RULE_TOKEN_PLUS },
          { "->",   RULE_TOKEN_ARROW },
          { "<",    RULE_TOKEN_LT },
          { ">",    RULE_TOKEN_GT },
          { "[",    RULE_TOKEN_LBRACK },
          { "]",    RULE_TOKEN_RBRACK },
          { "^",    RULE_TOKEN_CARET },
          { "{",    RULE_TOKEN_LBRACE },
          { "}",    RULE_TOKEN_RBRACE },
          { ":",    RULE_TOKEN_COLON },
          { "=",    RULE_TOKEN_EQUALS },
        };
        for (size_t i = 0; i < ARRAY_SIZE (tbl); ++ i)
        {
          opers.insert (StringIntMap::value_type (tbl [i].name, tbl [i].number));
        }
      }
      ~ RuleOperTable ()
      {}
      // get operator kind, exception if not operator lexeme
      int getOperKind (std::string const & name)
      {
        StringIntMap::const_iterator p = opers.find (name);
        if (p == opers.end ())
        {
          throw runtime_error (Message ("unexpected operator: %") << name);
        }
        return p->second;
      }
    private:
      typedef std::map <std::string, int> StringIntMap;
      StringIntMap opers;
    };

    // lexer
    class RuleLexer : public basil::Lexer
    {
    public:
      RuleLexer (BasilCC & cc, std::string const & filename)
        : m_cc (cc), m_reader (filename)
      {}
      ~ RuleLexer ()
      {}
      // get next token 
      virtual int getNextToken (int lex_state, basil::Loc & loc, std::string & lexeme)
      {
        CharKind ch_kind = peekCharKind (m_reader);
        for (;;)
        {
          int token_number = RULE_TOKEN_NULL;
          loc = m_reader.getLocation ();
          lexeme.clear ();
          bool found_ws  = false;
          bool found_dir = false;
          int state = S_START;
          // lex next token
          for (;;)
          {
            switch (state)
            {
              // start
              case S_START:
              {
                switch (ch_kind)
                {
                  case C_LETTER:
                  {
                    state = S_IDENT;
                    break;
                  }
                  case C_DIGIT:
                  {
                    state = S_NUMBER;
                    break;
                  }
                  case C_MINUS:
                  {
                    state = S_MINUS;
                    break;
                  }
                  case C_OP:
                  case C_GT:
                  {
                    state = S_OP;
                    break;
                  }
                  case C_HASH:
                  {
                    state = S_COMMENT;
                    break;
                  }
                  case C_WS:
                  {
                    state = S_WS;
                    break;
                  }
                  case C_NEWLINE:
                  {
                    state = S_WS;
                    break;
                  }
                  case C_PERCENT:
                  {
                    state = S_DIRECTIVE;
                    break;
                  }
                  case C_EOF:
                  {
                    lexeme = "end of file";
                    token_number = RULE_TOKEN_EOT;
                    break;
                  }
                  case C_DQUOTE:
                  case C_NAC:
                  {
                    throw runtime_error (Message (loc, "invalid character"));
                  }   
                }
                break;
              }
              // ident
              case S_IDENT:
              {
                if (ch_kind != C_LETTER && ch_kind != C_DIGIT)
                {
                  if (ch_kind == C_MINUS)
                  {
                    // might be arrow or ident character
                    int next_ch_kind = peekCharKind (m_reader, 1);
                    if (next_ch_kind != C_LETTER && next_ch_kind != C_DIGIT && next_ch_kind != C_MINUS)
                    {
                      token_number = RULE_TOKEN_IDENT;
                    }
                  }
                  else
                  {
                    token_number = RULE_TOKEN_IDENT;
                  }
                }
                break;
              }
              // directive
              case S_DIRECTIVE:
              {
                // just letters
                if (ch_kind != C_LETTER)
                {
                  found_dir = true;
                }
                break;
              }
              // -
              case S_MINUS:
              {
                if (ch_kind == C_GT)
                {
                  state = S_OP;
                }
                else
                {
                  state = S_IDENT;
                }
                break;
              }
              // number
              case S_NUMBER:
              {
                if (ch_kind != C_DIGIT)
                {
                  token_number = RULE_TOKEN_NUMBER;
                }
                break;
              }
              // operator
              case S_OP:
              {
                token_number = m_oper_table.getOperKind (lexeme);
                break;
              }
              // comment
              case S_COMMENT:
              {
                // newline or eof ends comment
                if (ch_kind == C_NEWLINE || ch_kind == C_EOF)
                {
                  found_ws = true;
                }
                break;
              }
              // white space
              case S_WS:
              {
                if (ch_kind != C_WS && ch_kind != C_NEWLINE)
                {
                  found_ws = true;
                }
                break;
              }
            }
            if (token_number != RULE_TOKEN_NULL)
            {
              return token_number;
            }
            if (found_ws || found_dir)
            {
              break;
            }
            // consume next char and if not comment or whitespace add to lexeme
            char ch = m_reader.nextChar ();
            if (state < S_WS)
            {
              // push ident char
              lexeme += ch;
            }
            ch_kind = peekCharKind (m_reader);
          }
          if (found_dir)
          {
            if (lexeme == "%keyword")
            {
              string name = nextIdent ();
              if (name.empty ())
              {
                throw runtime_error (Message (loc, "missing token name in keyword directive"));
              }
              string keyword = nextString ();
              if (keyword.empty ())
              {
                throw runtime_error (Message (loc, "missing string in keyword directive"));
              }
              keyword = stripQuotes (keyword);
              addKeyword (m_cc, m_cc.intern (name), keyword);
            }
            else if (lexeme == "%recover")
            {
              string strategy = nextIdent ();
              if (strategy == "insert")
              {
                string name = nextIdent ();
                if (name.empty ())
                {
                  throw runtime_error (Message (loc, "missing token after insert"));
                }
                if (! isToken (name.c_str ()))
                {
                  throw runtime_error (Message (loc, "% is not a token") << name);
                }
                string lexeme = nextString ();
                if (! lexeme.empty ())
                {
                  lexeme = stripQuotes (lexeme);
                }
                addInsertStrategy (m_cc, getSymbol (m_cc, name), lexeme);
              }
              else if (strategy == "discard")
              {
                string numstr = nextInt ();
                int num = numstr.empty () ? INT_MAX : atoi (numstr.c_str ());
                addDiscardStrategy (m_cc, num);
              }
              else
              {
                throw runtime_error (Message (loc, "invalid recover strategy: %") << strategy);
              }
            }
            else
            {
              throw runtime_error (Message (loc, "invalid directive"));
            }
          }
        }
      }
    private:
      // skip whitespace
      void skipWs ()
      {
        for (;;)
        {
          CharKind ch_kind = peekCharKind (m_reader);
          if (ch_kind != C_WS)
          {
            break;
          }
          m_reader.nextChar ();
        }
      }
      // next identifier
      std::string nextIdent ()
      {
        skipWs ();
        string lexeme;
        for (;;)
        {
          CharKind ch_kind = peekCharKind (m_reader);
          if (ch_kind != C_LETTER && ch_kind != C_DIGIT)
          {
            if (ch_kind == C_MINUS)
            {
              int next_ch_kind = peekCharKind (m_reader, 1);
              if (next_ch_kind != C_LETTER && next_ch_kind != C_DIGIT && next_ch_kind != C_MINUS)
              {
                break;
              }
            }
            else
            {
              break;
            }
          }
          lexeme += m_reader.nextChar ();
        }
        return lexeme;
      }
      // next string
      std::string nextString ()
      {
        skipWs ();
        string lexeme;
        CharKind ch_kind = peekCharKind (m_reader);
        if (ch_kind == C_DQUOTE)
        {
          basil::Loc loc = m_reader.getLocation ();
          lexeme += m_reader.nextChar ();
          for (;;)
          {
            ch_kind = peekCharKind (m_reader);
            if (ch_kind == C_NEWLINE)
            {
              throw runtime_error (Message (loc, "missing string ending double quote"));
            }
            lexeme += m_reader.nextChar ();
            if (ch_kind == C_DQUOTE)
            {
              break;
            }
          }
        }
        return lexeme;
      }
      // next integer
      std::string nextInt ()
      {
        skipWs ();
        string lexeme;
        for (;;)
        {
          CharKind ch_kind = peekCharKind (m_reader);
          if (ch_kind != C_DIGIT)
          {
            break;
          }
          lexeme += m_reader.nextChar ();
        }
        return lexeme;
      }
    private:
      BasilCC & m_cc;
      // reader 
      RuleReader m_reader;
      // operator table
      RuleOperTable m_oper_table;
    }
  }
}

using namespace basilcc::rule_lexer;
using namespace basil;
using namespace std;

namespace
{
  // rule tokens
  enum
  {
    RULE_TOKEN_NULL = -1,
    RULE_TOKEN_EOT = 0,
    RULE_TOKEN_ARROW,
    RULE_TOKEN_LBRACK,
    RULE_TOKEN_IDENT,
    RULE_TOKEN_RBRACK,
    RULE_TOKEN_LPAREN,
    RULE_TOKEN_RPAREN,
    RULE_TOKEN_GT,
    RULE_TOKEN_PLUS,
    RULE_TOKEN_NUMBER,
    RULE_TOKEN_STAR,
    RULE_TOKEN_LT,
    RULE_TOKEN_CARET,
    RULE_TOKEN_BANG,
    RULE_TOKEN_LBRACE,
    RULE_TOKEN_RBRACE,
    RULE_TOKEN_COLON,
    RULE_TOKEN_EQUALS,
  }

  // character kinds
  enum CharKind
  {
    C_LETTER,
    C_DIGIT,
    C_MINUS,
    C_GT,
    C_PERCENT,
    C_DQUOTE,
    C_HASH,
    C_OP,
    C_WS,
    C_NEWLINE,
    C_EOF,
    C_NAC,
  };
  CharKind char_index [] =
  {
    // 0
    C_EOF, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_WS,
    // 10
    C_NEWLINE, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC,
    // 20
    C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC, C_NAC,
    // 30
    C_NAC, C_NAC, C_WS, C_OP, C_DQUOTE, C_HASH, C_OP, C_PERCENT, C_NAC, C_NAC,
    // 40
    C_OP, C_OP, C_OP, C_OP, C_NAC, C_MINUS, C_NAC, C_NAC, C_DIGIT, C_DIGIT,
    // 50
    C_DIGIT, C_DIGIT, C_DIGIT, C_DIGIT, C_DIGIT, C_DIGIT, C_DIGIT, C_DIGIT, C_OP, C_NAC,
    // 60
    C_OP, C_OP, C_GT, C_NAC, C_NAC, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER,
    // 70
    C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER,
    // 80
    C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER,
    // 90
    C_LETTER, C_OP, C_NAC, C_OP, C_OP, C_LETTER, C_NAC, C_LETTER, C_LETTER, C_LETTER,
    // 100
    C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER,
    // 110
    C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER, C_LETTER,
    // 120
    C_LETTER, C_LETTER, C_LETTER, C_OP, C_NAC, C_OP, C_NAC, C_NAC,
  };

  // peek next char kind from reader
  CharKind peekCharKind (RuleReader & reader, int n = 0)
  {
    CharKind ch_kind = C_EOF;
    if (int ch = reader.peekChar (n))
    {
      ch_kind = (ch >= 0 && ch <= 127) ? char_index [ch] : C_LETTER;
    }
    return ch_kind;
  }

  // lex states
  enum
  {
    S_START,
    S_IDENT,
    S_DIRECTIVE,
    S_MINUS,
    S_NUMBER,
    S_OP,
    S_WS,
    S_COMMENT,
  }

  // strip quotes from string
  string stripQuotes (string const & str)
  {
    return str.substr (1, str.size () - 2);
  }
}

#hdr
#include <basil/lexer.h>
#include <basil/token_number.h>
#include <map>
#include <string>
#end

#src
#include <basil/loc.h>
#include <basil/message.h>
#include <basilcc/basilcc.h>
#include <basilcc/strategy_api.h>
#include <basilcc/symbol_api.h>
#include <basilcc/util.h>
#include <climits>
#include <cstdio>
#include <stdexcept>
#end
