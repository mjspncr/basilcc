namespace basilcc
{
  class BasilCC;

  // get lazy follow move from move sel and action seq
  LazyFollowMovePtr getLazyFollowMove (BasilCC & cc, LazyMoveSelPtr lazy_move_sel, LazyActionSeqPtr def_lazy_action_seq)
  {
    return cc.getTable <LazyFollowMoveTable> ().getLazyFollowMove (lazy_move_sel, def_lazy_action_seq);
  }
}

using namespace basilcc;

namespace
{
  class LazyFollowMoveTable : public Table
  {
  public:
    LazyFollowMoveTable (BasilCC & cc)
    {}
    ~ LazyFollowMoveTable ()
    {
      deleteObjects (m_lazy_follow_moves.begin (), m_lazy_follow_moves.end ());
    }

    // get lazy follow move from components
    LazyFollowMovePtr getLazyFollowMove (LazyMoveSelPtr lazy_move_sel, LazyActionSeqPtr def_lazy_action_seq)
    {
      m_lazy_follow_move_trie.push (size_t (lazy_move_sel));
      m_lazy_follow_move_trie.push (size_t (def_lazy_action_seq));
      LazyFollowMovePtr & lazy_follow_move = m_lazy_follow_move_trie.commit (0);
      if (! lazy_follow_move)
      {
        lazy_follow_move = * m_lazy_follow_moves.insert (m_lazy_follow_moves.end (), new LazyFollowMove (lazy_move_sel, def_lazy_action_seq));
      }
      return lazy_follow_move;
    }

    enum { TABLE = TABLE_LAZY_FOLLOW_MOVE }
  private:
    LazyFollowMovePtrTrie m_lazy_follow_move_trie;
    LazyFollowMovePtrVector m_lazy_follow_moves;
  }
}

#hdr
#include <basilcc_lazy_action_seq_ptr.h>
#include <basilcc_lazy_follow_move_ptr.h>
#include <basilcc_lazy_move_sel_ptr.h>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_lazy_action_seq_ptr.h>
#include <basilcc_lazy_follow_move.h>
#include <basilcc_lazy_follow_move_ptr.h>
#include <basilcc_lazy_follow_move_ptr_trie.h>
#include <basilcc_lazy_follow_move_ptr_vector.h>
#include <basilcc_lazy_move_sel_ptr.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#end
