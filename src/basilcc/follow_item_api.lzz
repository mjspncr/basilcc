namespace basilcc
{
  class BasilCC;

  // freeze follow item, return shared item, reuse follow_item or delete it
  FollowItemPtr freezeFollowItem (BasilCC & cc, FollowItemPtr & follow_item)
  {
    return cc.getTable <FollowItemTable> ().freeze (follow_item);
  }
  
  // freeze follow item functor
  inline FollowItemPtr FreezeFollowItem (BasilCC & cc; FollowItemPtr & follow_item) const
  {
    return freezeFollowItem (cc, follow_item);
  }
}

using namespace basilcc;

namespace 
{
  class FollowItemTable : public Table
  {
  public:
    FollowItemTable (BasilCC & cc)
    {}
    ~ FollowItemTable ()
    {
      deleteObjects (m_follow_items.begin (), m_follow_items.end ());
    }
    
    // freeze follow item, return shared item, reuse follow_item or delete it
    FollowItemPtr freeze (FollowItemPtr & follow_item)
    {
      m_follow_item_trie.push (ptrdiff_t (follow_item->getToken ()));
      m_follow_item_trie.push (ptrdiff_t (follow_item->getShortcut ()));
      Priority const & rp = follow_item->getReducePriority ();
      m_follow_item_trie.push (rp.getCount ());
      m_follow_item_trie.push (rp.getBang ());
      m_follow_item_trie.push (follow_item->hasSticky () ? 1 : 0);
      m_follow_item_trie.push (follow_item->hasAccept () ? 1 : 0);
      FollowItemPtr shared_follow_item = m_follow_item_trie.commit (follow_item);
      if (shared_follow_item == follow_item)
      {
        m_follow_items.push_back (shared_follow_item);
      }
      else
      {
        deleteObject (follow_item);
      }
      return shared_follow_item;
    }

    enum { TABLE = TABLE_FOLLOW_ITEM }
  private:
    FollowItemPtrTrie m_follow_item_trie;
    FollowItemPtrVector m_follow_items;
  }
}

#hdr
#include <basilcc/follow_item_ptr.h>
#end

#src
#include <basilcc/basilcc.h>
#include <basilcc/follow_item.h>
#include <basilcc/follow_item_ptr_trie.h>
#include <basilcc/follow_item_ptr_vector.h>
#include <basilcc/priority.h>
#include <basilcc/table.h>
#include <basilcc/util.h>
#end
