namespace basilcx {

class Symbol;
class ActionSeq;

class Move {
  public:
    Move(Symbol *token, ActionSeq *action_seq)
        : _token(token), _action_seq(action_seq)
    {}

    ~Move()
    {}

    // get token
    inline Symbol *get_token() const
    {

        return _token;
    }

    // get action seq
    inline ActionSeq *get_action_seq() const
    {
        return _action_seq;
    }

    // print to stream
    void format(std::ostream &os) const
    {
        os << _token->get_name() << " - ";
        format_actions(_action_seq->get_actions(), os);
    }

  private:
    Symbol *_token;
    ActionSeq *_action_seq;
};

// true if a < b
bool operator<(Move const &a, Move const &b)
{
    if (a.get_token() != b.get_token()) {
        return a.get_token() < b.get_token();
    }
    return a.get_action_seq() < b.get_action_seq();
}

} // basilcx

#hdr
#include <string>
#include <iosfwd>
#end

#src
#include <basilcx_action.h>
#include <basilcx_action_seq.h>
#include <basilcx_symbol.h>

#include <ostream>
#end
