// basilcc base kernel table
//

namespace basilcc {

class BaseRule;
class BaseKernel;
typedef std::vector<BaseRule const *> BaseRuleVector;

class BaseKernelTable
{
  public:
    BaseKernelTable()
    {}

    ~BaseKernelTable()
    {
        delete_objects(_base_kernels);
    }

    // get base kernel from rules, steals rules
    BaseKernel const *get_base_kernel(BaseRuleVector &base_rules)
    {
        std::unique_ptr<BaseKernel> base_kernel(new BaseKernel(base_rules));
        std::pair<BaseKernelSet::iterator, bool> r = _base_kernels.insert(base_kernel.get());
        if (r.second) {
            base_kernel.release();
        }
        return *r.first;
    }

  private:
    bool BaseKernelLess(; BaseKernel const *a, BaseKernel const *b) const
    {
        return *a < *b;
    }
    typedef std::set<BaseKernel const *, BaseKernelLess> BaseKernelSet;
    BaseKernelSet _base_kernels;
};

} // basilcc

#hdr
#include <set>
#include <vector>
#end

#src
#include <basilcc_base_kernel.h>
#include <basilcc_util.h>
#include <memory>
#end
