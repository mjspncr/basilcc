namespace basilcx {

class Action;
class Rule;
class State;
class Symbol;

// action table
class ActionTable
{
  public:
    ActionTable()
    {}

    ~ActionTable()
    {
        delete_objects(_actions);
    }

    // get shift action from state
    Action *get_shift_action(State *state)
    {
        return get_action(ActionPtr(new ShiftAction(state)));
    }

    // get reduce action from components
    Action *get_reduce_action(Rule *rule, Symbol *shortcut, bool accept)
    {
        return get_action(ActionPtr(new ReduceAction(rule, shortcut, accept)));
    }

  private:
    typedef std::unique_ptr<Action> ActionPtr;
    Action *get_action(ActionPtr action_ptr)
    {
        std::pair<ActionSet::iterator, bool> r = _actions.insert(action_ptr.get());
        if (r.second) {
            action_ptr.release();
        }
        return *r.first;
    }

  private:
    bool ActionLess(; Action *a, Action *b) const { return *a < *b; }
    typedef std::set<Action *, ActionLess> ActionSet;
    ActionSet _actions;
};

} // basilcx

#hdr
#include <memory>
#include <set>
#include <vector>
#end

#src
#include <basilcx_action.h>
#include <basilcx_util.h>
#end
