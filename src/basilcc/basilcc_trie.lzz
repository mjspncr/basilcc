// trie
namespace basilcc
{
  template <class T, T TERM, size_t BLOCKSIZE, class X>
  class Trie
  {
  public:
    Trie ()
    {
      // create null key
      TrieKey <T, TERM> key = m_key_manager.freeze ();
      m_key_manager.commit ();
      m_root = new Node (key, 0xFFFFFFFF, X ());
      m_root->left = m_root;
      m_root->right = m_root;
    }
    ~ Trie ()
    {
      delete m_root;
    }
    // append to current key
    void push (T t)
    {
      m_key_manager.push (t);
    }
    // associate object with current key, insert if not key not already preset, return ref to obj
    X & commit (X const & obj)
    {
      Node * n, * m, ** p;
      unsigned int bit, dif;
      TrieKey <T, TERM> key = m_key_manager.freeze ();
      // find closest match
      n = m_root;
      do
      {
        bit = n->bit;
        if (key.isBitSet (bit))
        {
          n = n->right;
        }
        else
        {
          n = n->left;
        }
      }
      while (bit < n->bit);
      if (key.compare (n->key))
      {
        // discard data
        m_key_manager.discard ();
        // save node
        m = n;
      }
      else
      {
        // commit data
        m_key_manager.commit ();
        // get first different bit
        dif = key.getDiffBit (n->key.getData ());
        // where to insert it?
        p = & m_root;
        n = * p;
        bit = n->bit;
        while (dif > bit)
        {
          if (key.isBitSet (bit))
          {
            p = & n->right;
          }
          else
          {
            p = & n->left;
          }
          n = * p;
          if (bit >= n->bit)
          {
            break;
          }
          bit = n->bit;
        }
        // create new node
        m = new Node (key, dif, obj);
        if (key.isBitSet (dif))
        {
          m->right = m;
          m->left = n;
        }
        else
        {
          m->left = m;
          m->right = n;
        }
        * p = m;
      }
      // return pointer to new key
      return m->obj;
    }
    // find
    X * find ()
    {
      Node * n;
      unsigned int bit;
      TrieKey <T, TERM> key = m_key_manager.freeze ();
      // find closest match
      n = m_root;
      do
      {
        bit = n->bit;
        if (key.isBitSet (bit))
        {
          n = n->right;
        }
        else
        {
          n = n->left;
        }
      }
      while (bit < n->bit);
      if (key.compare (n->key))
      {
        m_key_manager.discard ();
        return & n->obj;
      }
      else
      {
        m_key_manager.discard ();
        return 0;
      }
    }
  private:
    struct Node
    {
      TrieKey <T, TERM> key;
      unsigned int bit;
      X obj;
      Node * left;
      Node * right;
      Node (TrieKey <T, TERM> const & key, unsigned int bit, X const & obj)
        : key (key), bit (bit), obj (obj)
      {}
      ~ Node ()
      {
        if (left->bit > bit)
        {
          delete left;
        }
        if (right->bit > bit)
        {
          delete right;
        }
      }
    };
    TrieKeyStore <T, TERM, BLOCKSIZE> m_key_manager;
    Node * m_root;
  }
}

// template code to tpl file
#pragma tpl

#hdr
#include <basilcc_trie_key_store.h>
#include <assert.h>
#include <stddef.h>
#include <string.h>
#end

#src
#end
