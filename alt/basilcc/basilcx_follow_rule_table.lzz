namespace basilcx {

class Follow;
class FollowRule;
class ShiftRule;
typedef std::unique_ptr<FollowRule> FollowRulePtr;

class FollowRuleTable
{
  public:
    FollowRuleTable()
    {}
      
    ~FollowRuleTable()
    {
        delete_objects(_follow_rules);
    }

    // get follow rule from shift rule and follow
    FollowRule *get_follow_rule(ShiftRule *shift_rule, Follow const &follow)
    {
        FollowRulePtr follow_rule(new FollowRule(shift_rule, follow));
        return freeze_follow_rule(follow_rule);
    }

    // freeze follow rule
    FollowRule *freeze_follow_rule(FollowRulePtr &follow_rule)
    {
        std::pair<FollowRuleSet::iterator, bool> r = _follow_rules.insert(follow_rule.get());
        if (r.second) {
            follow_rule.release();
        }
        return *r.first;
    }

  private:
    inline bool FollowRuleLess(; FollowRule *a, FollowRule *b) const { return *a < *b; }
    typedef std::set<FollowRule *, FollowRuleLess> FollowRuleSet;
    FollowRuleSet _follow_rules;
};

} // basilcx

#hdr
#include <basilcx_follow_rule.h>

#include <set>
#include <memory>
#end

#src
#include <basilcx_util.h>
#end
