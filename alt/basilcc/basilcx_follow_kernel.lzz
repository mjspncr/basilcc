namespace basilcx {

class FollowBase;
class FollowRule;
class ShiftKernel;
class Workspace;
typedef std::vector<FollowRule *> FollowRuleVector;

class FollowKernel {
  public:
    // steals follow rules
    FollowKernel(FollowRuleVector &follow_rules)
        : _shift_kernel(0)
    {
        _follow_rules.swap(follow_rules);
    }
    
    ~FollowKernel()
    {}

    // get kernel rules
    inline FollowRuleVector const &get_follow_rules() const
    {
        return _follow_rules;
    }

    // get shift kernel
    ShiftKernel *get_shift_kernel(Workspace &w)
    {
        if (!_shift_kernel) {
            ShiftRuleVector shift_rules;
            shift_rules.reserve(_follow_rules.size());
            for (FollowRule *follow_rule : _follow_rules) {
                shift_rules.push_back(follow_rule->get_shift_rule());
            }
            _shift_kernel = w.shift_kernels.get_shift_kernel(shift_rules);
        }
        return _shift_kernel;
    }

    // get follow base
    FollowBase *get_follow_base(Workspace &w)
    {
        // on demand
        if (!_follow_base) {
            ShiftBase *shift_base = get_shift_kernel(w)->get_shift_base(w);
            _follow_base.reset(new FollowBase(w, shift_base, _follow_rules));
        }
        return _follow_base.get();
    }

    // get follow base w/o workspace, must be set
    FollowBase *get_follow_base() const
    {
        assert(_follow_base);
        return _follow_base.get();
    }

  private:
    ShiftKernel *_shift_kernel;
    FollowRuleVector _follow_rules;
    std::unique_ptr<FollowBase> _follow_base; // owns follow base
};

// a < b, compares pointers
bool operator<(FollowKernel const &a, FollowKernel const &b)
{
    FollowRuleVector const &a_follow_rules = a.get_follow_rules();
    FollowRuleVector const &b_follow_rules = b.get_follow_rules();
    if (a_follow_rules.size() != b_follow_rules.size()) {
        return a_follow_rules.size() < b_follow_rules.size();
    }
    return a_follow_rules < b_follow_rules;
}

} // basilcx

#hdr
#include <vector>
#include <memory>
#end

#src
#include <basilcx_follow_base.h>
#include <basilcx_follow_rule.h>
#include <basilcx_shift_kernel.h>
#include <basilcx_workspace.h>

#include <assert.h>
#end
