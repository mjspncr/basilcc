namespace basilcx {

class Move;
typedef std::vector<Move *> MoveVector;

// move selection
class MoveSel {
  public:
    // steals moves
    MoveSel(MoveVector &moves)
        : _num(-1)
    {
        _moves.swap(moves);
    }

    ~MoveSel()
    {}

    // get moves
    inline MoveVector const &get_moves() const
    {
        return _moves;
    }

    int _num;
  private:
    MoveVector _moves;
};

// true if a < b
bool operator<(MoveSel const &a, MoveSel const &b)
{
    MoveVector const &a_moves = a.get_moves();
    MoveVector const &b_moves = b.get_moves();
    if (a_moves.size() != b_moves.size()) {
        return a_moves.size() < b_moves.size();
    }
    return a_moves < b_moves;
}

} // basilcx

#hdr
#include <vector>
#end
